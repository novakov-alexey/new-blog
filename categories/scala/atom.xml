<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>Alexey Novakov Notes - scala</title>
	<subtitle>Alexey Novakov: Software Engineering Notes</subtitle>
	<link href="https://novakov-alexey.github.io/categories/scala/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://novakov-alexey.github.io"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2021-05-22T00:00:00+00:00</updated>
	<id>https://novakov-alexey.github.io/categories/scala/atom.xml</id>
	<entry xml:lang="en">
		<title>Face Identification with VGGFace and OpenCV</title>
		<published>2021-05-22T00:00:00+00:00</published>
		<updated>2021-05-22T00:00:00+00:00</updated>
		<link href="https://novakov-alexey.github.io/face-identification/" type="text/html"/>
		<id>https://novakov-alexey.github.io/face-identification/</id>
		<content type="html">&lt;p&gt;Face detection and recognition is one the area where Deep Learning is incredibly useful. There are many studies and datasets related to
human faces and their detection&#x2F;recognition. In this article we will implement Machine Learning pipeline for face detection and recognition using few libraries and CNN model.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h1 id=&quot;pipeline&quot;&gt;Pipeline&lt;&#x2F;h1&gt;
&lt;p&gt;One the part will be implemented with very popular C++ library &lt;a href=&quot;https:&#x2F;&#x2F;opencv.org&#x2F;&quot;&gt;OpenCV&lt;&#x2F;a&gt;, which is around for a long time. 
It has many modules for image processing, object classification, neural networks and more. We are going to use its Java Wrapper - &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bytedeco&#x2F;javacv&quot;&gt;JavaCV&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;OpenCV comes with human face detector module, which is called &amp;quot;Haar Cascade&amp;quot; classifier. 
This class takes an image and returns a &lt;a href=&quot;http:&#x2F;&#x2F;bytedeco.org&#x2F;javacpp-presets&#x2F;opencv&#x2F;apidocs&#x2F;org&#x2F;bytedeco&#x2F;opencv&#x2F;opencv_core&#x2F;Rect.html&quot;&gt;Rect&lt;&#x2F;a&gt; object of the detected face(s) in it. The Rect object is a data structure that has X and Y coordiantes of
the left-top corners plus width and height where region of interest is located. In our case, rectangular area is a face. For example:&lt;&#x2F;p&gt;
&lt;p&gt;Original photo:&lt;&#x2F;p&gt;
&lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;novakov-alexey.github.io&amp;#x2F;processed_images&amp;#x2F;67d062d7e2f53c4300.jpg&quot; class=&quot;center-image&quot;&#x2F;&gt;
&lt;br&#x2F;&gt;&lt;br&#x2F;&gt;
&lt;p&gt;Cropped with Haar Cascade:&lt;&#x2F;p&gt;
&lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;novakov-alexey.github.io&amp;#x2F;processed_images&amp;#x2F;13188dcf8d15d03500.jpg&quot; class=&quot;center-image&quot;&#x2F;&gt;
&lt;br&#x2F;&gt;&lt;br&#x2F;&gt;
&lt;p&gt;Once we get an area of the detected face(s), we can compare its pixel data with in advance extracted face features of known faces. 
Comparison algroithm calculates a Euclidean distance between detected face vector with vectors of known faces. 
The smallest distance with some known face sets its label as a result. 
That means, we can take known face label that has smallest distance as a result of face identification. 
Our workflow will look like this:&lt;&#x2F;p&gt;
&lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;novakov-alexey.github.io&amp;#x2F;processed_images&amp;#x2F;4a858f5e1125886c00.png&quot; class=&quot;center-image&quot;&#x2F;&gt;
&lt;br&#x2F;&gt;&lt;br&#x2F;&gt;
&lt;h1 id=&quot;photo-preparation&quot;&gt;Photo Preparation&lt;&#x2F;h1&gt;
&lt;p&gt;In order to extract person features, we will prepare separate folder with image per each person:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Alexey (myself)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Guy_Ritchie&quot;&gt;Guy Ritchie&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Tom_Araya&quot;&gt;Tom Araya&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Input directory:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;raw_photos
├──&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; guy_ritchie
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;└──&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; tom_arraya
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Output folder:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;dataset-people
├──&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; guy_ritchie
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;└──&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; tom_arraya
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;novakov-alexey.github.io&amp;#x2F;processed_images&amp;#x2F;28029bc9751301e900.png&quot; class=&quot;center-image&quot;&#x2F;&gt;
&lt;br&#x2F;&gt;&lt;br&#x2F;&gt;
&lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;novakov-alexey.github.io&amp;#x2F;processed_images&amp;#x2F;b41d662a0b78de9700.png&quot; class=&quot;center-image&quot;&#x2F;&gt;
&lt;br&#x2F;&gt;&lt;br&#x2F;&gt;
&lt;p&gt;Plus I am adding my photos to &lt;code&gt;dataset-people&lt;&#x2F;code&gt; directory&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;dataset-people
├──&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; alexey
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; guy_ritchie
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;└──&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; tom_arraya
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Below program reads photos from the local folder and crops faces to save them to a separate folder:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F;cropFaces.scala

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; org&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;bytedeco&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;opencv&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;opencv_core&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;{Rect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; Mat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; Size}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; org&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;bytedeco&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;opencv&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;global&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;opencv_imgproc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;resize
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; org&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;bytedeco&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;opencv&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;global&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;opencv_imgcodecs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;{imread&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; imwrite}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; java&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;nio&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;{Files&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; Paths}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;createIfNotExists&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(path: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=
  if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; !&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Files&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;exists(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Paths&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;get(path)) then 
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Files&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;createDirectory(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Paths&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;get(path))

@main
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;crop&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=
  val datasetDir = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;dataset-people&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;  createIfNotExists(datasetDir)

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val dirs = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Paths&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;get(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;raw_photos&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;toFile&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;listFiles&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;filter(f &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; !f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;getName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;startsWith(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;.&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;))

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; dir &amp;lt;- dirs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;do
    val label =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; dir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;getName
    println(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;Extracting faces for &amp;#39;$label&amp;#39; label&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)

    createIfNotExists(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Paths&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;get(datasetDir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; label)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;toString)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val images =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; dir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;listFiles&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;filter(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;toString&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;endsWith(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;.jpg&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;))

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; file &amp;lt;- images &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;      println(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;Reading file: $file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val image =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; imread(file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;toString)
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val faces =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; detectFaces(image)  

      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(face&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;i) &amp;lt;- faces&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;zipWithIndex &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;do        
        val crop = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Rect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(face&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; face&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; face&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;width&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; face&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;height)
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val cropped = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Mat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(image&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; crop)
        resize(cropped&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; cropped&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ImageHeight&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ImageWidth&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;))  
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val filename = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Paths&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;get(datasetDir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; label&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;$i-${file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;getName}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;toString
        println(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;Writing $filename&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
        imwrite(filename&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; cropped)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The same code on GitHub is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;novakov-alexey&#x2F;face-identification&#x2F;blob&#x2F;main&#x2F;src&#x2F;main&#x2F;scala&#x2F;cropFaces.scala&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;get-onnx-model&quot;&gt;Get ONNX model&lt;&#x2F;h1&gt;
&lt;p&gt;Now we can extract face features for all three persons. We are going to use CNN model which was trained on the &lt;a href=&quot;https:&#x2F;&#x2F;exposing.ai&#x2F;vgg_face&#x2F;&quot;&gt;VGGFace dataset&lt;&#x2F;a&gt;.
The easiest option to access Keras (which is Python high-level API to Tensorflow) trained model from Scala is to export it to &lt;a href=&quot;https:&#x2F;&#x2F;onnx.ai&#x2F;&quot;&gt;ONNX&lt;&#x2F;a&gt; format. 
Let&#x27;s proceed:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Create &lt;code&gt;SavedModel&lt;&#x2F;code&gt; file:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;ul&gt;
&lt;li&gt;Instaniate Python VGGFace class from &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rcmalli&#x2F;keras-vggface&quot;&gt;keras-vggface&lt;&#x2F;a&gt; library
with &lt;code&gt;include_top=False&lt;&#x2F;code&gt; to skip last layer of the CNN. &lt;&#x2F;li&gt;
&lt;li&gt;Save instaniated model to Tensforflow &lt;a href=&quot;https:&#x2F;&#x2F;keras.io&#x2F;api&#x2F;models&#x2F;model_saving_apis&#x2F;&quot;&gt;Tensorflow SavedModel&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;keras_vggface&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;vggface &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;VGGFace

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;IMAGE_HEIGHT = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;224
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;IMAGE_WIDTH = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;224
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;COLOR_CHANNELS = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;3

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;output_path &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;#39;vggface_model&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;model &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;VGGFace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(model&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;#39;vgg16&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;include_top&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=False&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;input_shape&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;IMAGE_HEIGHT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;IMAGE_WIDTH&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;COLOR_CHANNELS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;pooling&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;#39;avg&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
model&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;save&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(output_path)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Important: we save VGGFace model without last layer. We do not need any predictions that VGGFace model originally was supposed to output, 
since we are going to use extracted features to predict other persons than those in original VGGFace dataset.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Convert saved model to ONNX format via &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;onnx&#x2F;tensorflow-onnx&quot;&gt;tensorflow-onnx&lt;&#x2F;a&gt; library&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;python&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; -m tf2onnx.convert &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;  --saved-model vggface_model &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;  --output data&#x2F;model.onnx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;  --tag serve
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After converting SavedModel to ONNX we get file &lt;code&gt;data&#x2F;model.onnx&lt;&#x2F;code&gt; of approx. 56Mb in size:&lt;&#x2F;p&gt;
&lt;h1 id=&quot;extracting-features&quot;&gt;Extracting Features&lt;&#x2F;h1&gt;
&lt;p&gt;Now we can use ONNX model from Scala code. In this step, we use VGGFace model to extract features of all 3 person faces
and save them into a file as HasMap for further step.&lt;&#x2F;p&gt;
&lt;p&gt;First we implement common functions, which we will use one more time for real-time face identification algorithm:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; common.scala
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; io&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;kjaer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;compiletime&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;*

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; org&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;bytedeco&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;javacpp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;indexer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;{UByteIndexer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; FloatRawIndexer}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; org&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;bytedeco&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;opencv&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;global&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;opencv_core&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;*
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; org&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;bytedeco&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;opencv&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;opencv_core&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;{Mat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; Scalar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; RectVector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; UMat}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; org&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;bytedeco&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;opencv&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;global&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;opencv_imgproc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;*
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; org&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;bytedeco&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;opencv&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;opencv_objdetect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;CascadeClassifier

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; org&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;emergentorder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;compiletime&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;*
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; org&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;emergentorder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;onnx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;Tensors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;*
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; org&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;emergentorder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;onnx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;backends&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;*

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; java&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;nio&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;{Files&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; Paths&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; Path}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; io&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;bullet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;borer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;Cbor
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; java&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;io&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;{ByteArrayOutputStream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; File}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val OutputSize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Dimension &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;512
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val FeatureFilePath = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;data&#x2F;precomputed_features.cbor&amp;quot;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;type Features = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]]

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;saveFeatures&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(features: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Features&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val file = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;File&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;FeatureFilePath&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Cbor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;encode(features)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;to(file)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;result

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;getModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(path: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Path &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Paths&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;get(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;data&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;model.onnx&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val bytes = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Files&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;readAllBytes(path)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ORTModelBackend&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(bytes)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;predict&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; images: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; model: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ORTModelBackend&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; batch: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Dimension &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; outputSize: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Dimension &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;OutputSize
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val input = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(images&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; tensorDenotation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; tensorShapeDenotation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; shape(batch))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; model&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;fullModel[
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;   &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ImageClassification&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;   &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Batch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;##&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Features&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;##&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;TSNil&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;batch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.type #&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;outputSize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.type #&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;SNil&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tuple&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(input)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;   )

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;scale&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(img: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Mat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Mat &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val out = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Mat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; img&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;assignTo(out&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;CV_32FC4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; subtract(out&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Scalar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;93&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;5940&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;104&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;7624&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;129&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1863&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;asMat

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;toArray&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(mat: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Mat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val w =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; mat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;cols
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val h =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; mat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;rows
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val c =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; mat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;channels
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val rowStride =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; w * c

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val result = new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](rowStride * h)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val indexer =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; mat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;createIndexer[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;FloatRawIndexer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;off &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(y &amp;lt; h)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;   indexer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;get(y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; off&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; rowStride)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;   off += rowStride
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;   y += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; result
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;At this point we can run extraction step:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F;extract.scala
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; io&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;kjaer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;compiletime&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;*
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; org&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;emergentorder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;compiletime&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;*
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; org&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;emergentorder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;onnx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;Tensors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;*
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; org&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;emergentorder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;onnx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;backends&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;*
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; org&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;bytedeco&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;opencv&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;global&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;opencv_imgcodecs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;*
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; org&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;bytedeco&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;opencv&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;opencv_core&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;{Mat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; Scalar}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; java&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;nio&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;{Files&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; Paths}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; java&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;io&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;File
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; javax&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;imageio&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;ImageIO
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; scala&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;collection&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;parallel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;CollectionConverters&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;*

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;label2Features&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(dirs: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;File&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= 
  lazy val model =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; getModel()
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val batchSize = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;16

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;  dirs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;par&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;map { dir &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;
    val label =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; dir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;getName
    println(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;Extracting features for &amp;#39;$label&amp;#39; at $dir folder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val groups =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; dir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;listFiles&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;grouped(batchSize)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val features =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; groups&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;map { files &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;
      val images =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; files&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;map(f &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; toArray(scale(imread(f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;toString))))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;flatten
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val currentBatch =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; files&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;asInstanceOf[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Dimension&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]      
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val out =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; predict(images&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; model&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; currentBatch)      
      out&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;grouped(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;OutputSize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;toList
    }  
    label -&amp;gt; features&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;toList&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;flatten
  }

@main
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;extract &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=
  val dirs = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Paths&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;get(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;dataset-people&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;toFile&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;listFiles

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val avgFeatures =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; label2Features(dirs)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;map {
    (label, features) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt; 
      val count =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; features&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;length      
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val sum =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; features&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;reduce((a, b) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;zip(b)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;))
      label -&amp;gt; sum&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &#x2F; count)
  }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;toList&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;toMap

  saveFeatures(avgFeatures)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In the &lt;code&gt;extract&lt;&#x2F;code&gt; function, we do element-wise addition of all extracted vectors per each person. 
Then, final person vector is divided by number of images for that person to get average values of the extracted features. 
In the result we will get&#x2F;define such type alias:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;type Features = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h1 id=&quot;identify-faces&quot;&gt;Identify Faces&lt;&#x2F;h1&gt;
&lt;p&gt;Finally, we can use our extracted features to identify a person face. Keep in mind, that our prediction algorithm
knowns only 3 person faces. Any other person may be confused with one of the three known faces or they can be unknown.
If we want to more different people to be identifieable, we need their features as well, so go to step number one of our 
pipeline to collect those people photos and extract their features.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; main.scala
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; org&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;bytedeco&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;opencv&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;opencv_core&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;{Mat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; Size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; Rect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; Point&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; Scalar}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; org&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;bytedeco&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;opencv&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;global&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;opencv_imgproc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;*
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; org&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;bytedeco&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;opencv&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;opencv_videoio&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;VideoCapture
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; org&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;bytedeco&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;javacv&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;{CanvasFrame&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; OpenCVFrameConverter}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; javax&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;swing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;WindowConstants

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;createCavasFrame &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val frame = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;CanvasFrame&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;Detected Faces&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; frame&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;setDefaultCloseOperation(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;WindowConstants&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;EXIT_ON_CLOSE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; frame&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;setCanvasSize(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1280&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;720&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; frame

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;calcLabel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(face: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;features: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Features&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;threshold: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; features&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;foldLeft(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;?&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Float.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;MaxValue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;){ 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;((label&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;min)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(l&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;f)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val d =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; distance(face&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; f)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; d &amp;lt; threshold &amp;amp;&amp;amp; d &amp;lt; min then (l&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; d)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(label&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; min)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;_1  

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;drawLabel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(label: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;frame: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Mat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;topLeft: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Point&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val x =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; math&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;max(topLeft&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;x - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val y =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; math&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;max(topLeft&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;y - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val font = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;FONT_HERSHEY_SIMPLEX
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val thickness = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val fontScale = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val baseline = new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val size =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; getTextSize(label&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; font&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; fontScale&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; thickness&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; baseline)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val rectColor = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Scalar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;255&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; rectangle(
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;   frame&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Point&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; y - size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;height() - thickness)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Point&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(x + size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;width() - thickness&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; y + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;   rectColor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;CV_FILLED&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;LINE_8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val fontColor = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Scalar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;255&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; putText(frame&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; label&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Point&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; y)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; font&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; fontScale&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; fontColor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; thickness&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;CV_FILLED&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;toModelInput&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(crop: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Rect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;frame: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Mat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val cropped = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Mat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(frame&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; crop)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; resize(cropped&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; cropped&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ImageHeight&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ImageWidth&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; toArray(scale(cropped))

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;drawRectangle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(face: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Rect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;frame: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Mat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; rectangle(frame&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Point&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(face&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; face&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;y)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Point&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(face&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;x + face&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;width&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; face&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;y + face&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;height)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Scalar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;255&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; )
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In the main function we run infinite loop that captures video frame as an image.
The captured image is then used to detect and identify person faces.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;@main
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;demo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val capture = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;VideoCapture&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val canvasFrame =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; createCavasFrame  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val frame = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Mat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val converter = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;OpenCVFrameConverter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ToMat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val model =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; getModel()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val features =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; loadFeatures

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;try
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; capture&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;read(frame) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val faces =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; detectFaces(frame)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;     
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; face &amp;lt;- faces&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;get &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;yield
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;       drawRectangle(face&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; frame)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val crop = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Rect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(face&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; face&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; face&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;width&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; face&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;height)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val image =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; toModelInput(crop&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; frame)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val faceFeatures =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; predict(image&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; model)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;data
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val label =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; calcLabel(faceFeatures&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; features)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;       drawLabel(label&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; frame&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; crop&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;tl)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;     canvasFrame&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;showImage(converter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;convert(frame))                              
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;finally
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;   capture&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;release
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;   canvasFrame&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;dispose
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;demo-time&quot;&gt;Demo time&lt;&#x2F;h2&gt;
&lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;novakov-alexey.github.io&amp;#x2F;processed_images&amp;#x2F;0c35a4b088eab13f00.png&quot; class=&quot;center-image&quot;&#x2F;&gt;
&lt;br&#x2F;&gt;&lt;br&#x2F;&gt;
&lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;novakov-alexey.github.io&amp;#x2F;processed_images&amp;#x2F;7810d98d23bf520100.png&quot; class=&quot;center-image&quot;&#x2F;&gt;
&lt;br&#x2F;&gt;&lt;br&#x2F;&gt;
&lt;p&gt;If I put more faces into the frame, identification algorithm may confuse some of them and identify someone with a beard as Tom Araya or someone
with bright white skin color as Guy Ritchie. In order to overcome such issue, you need to add more different faces. 
Also, we would need to tune &lt;code&gt;threshold&lt;&#x2F;code&gt; parameter, which is used to discard faces which are far away from those we are interested in.
Level of certantity is relative of course, there can be still many people in the world who have very similar face features like Tom, Guy or me.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;summary&quot;&gt;Summary&lt;&#x2F;h1&gt;
&lt;p&gt;We have made powerful application with so little code to identify some person faces. There are several libraries were used to 
get the face detection working, such as OpenCV. &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;EmergentOrder&#x2F;onnx-scala&quot;&gt;ONNX-Scala&lt;&#x2F;a&gt; to access ONNX model fromm Scala. 
&lt;a href=&quot;https:&#x2F;&#x2F;sirthias.github.io&#x2F;borer&#x2F;&quot;&gt;Borer&lt;&#x2F;a&gt; library to save and load face features as Scala object (HashMap) into memory from disk.&lt;&#x2F;p&gt;
&lt;p&gt;Current approach to identify faces by calculating Euclidian distance between input faces and pre-calculated face is not the only one.
We could also train custom CNN or VGGFace-based model with new layer to predict labels for Tom, Guy and myself. 
However, such approach is compute intensive and actually gave me quite bad results. 
If you know something crucial about this approach to work well, please let me know.&lt;&#x2F;p&gt;
&lt;p&gt;Other approaches to solve face identification task which you may want to get familiar with are
&lt;a href=&quot;https:&#x2F;&#x2F;machinelearning.wtf&#x2F;terms&#x2F;triplet-loss&#x2F;&quot;&gt;Triplet Loss function&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;machinelearning.wtf&#x2F;terms&#x2F;siamese-neural-network&#x2F;&quot;&gt;Siamese Networks&lt;&#x2F;a&gt;. 
Perhaps, I will try one of them next time.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;links&quot;&gt;Links&lt;&#x2F;h1&gt;
&lt;p&gt;You can find complete project code at GitHub:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;novakov-alexey&#x2F;face-identification&#x2F;tree&#x2F;main&#x2F;src&#x2F;main&#x2F;scala&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;novakov-alexey&#x2F;face-identification&#x2F;tree&#x2F;main&#x2F;src&#x2F;main&#x2F;scala&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Convolutional Neural Network in Scala</title>
		<published>2021-04-02T00:00:00+00:00</published>
		<updated>2021-04-02T00:00:00+00:00</updated>
		<link href="https://novakov-alexey.github.io/cnn-in-scala/" type="text/html"/>
		<id>https://novakov-alexey.github.io/cnn-in-scala/</id>
		<content type="html">&lt;p&gt;Last time we used &lt;a href=&quot;..&#x2F;ann-mnist&#x2F;&quot;&gt;ANN&lt;&#x2F;a&gt; to train a Deep Learning model for image recognition using MNIST dataset.
This time we are going to look at more advanced network called Convolutional Neural Network or CNN in short.&lt;&#x2F;p&gt;
&lt;p&gt;CNN is designed to tackle image recognition problem. However, it can be used not only for image recognition. 
As we have seen last time, ANN using just hidden layers can learn quite well on MNIST.
However, for real life use cases we need higher accuracy. The main idea of CNN is to learn how to recognise object in their different shapes and positions 
using specific features of the image data. The goal of CNN is better model regularisation by using convolution and pooling operations.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;CNN adds two more type of layers:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Convolution layer&lt;&#x2F;li&gt;
&lt;li&gt;Max, Average or Global Pooling layer&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Convolution is a mathematical &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Convolution&quot;&gt;operation&lt;&#x2F;a&gt;, which is used in CNN layers instead of matrix multiplication like in fully-connected (dense) layers.
Typical CNN may consist of several Convolutional and Pooling layers. Final part of the network consists of the fully-connected layers like in ANN.&lt;&#x2F;p&gt;
&lt;p&gt;Below picture is showing typical CNN architecture with Tensor shapes. For example, 32x32x1 is an input image 32 pixels width and height having 1 color channel:&lt;&#x2F;p&gt;
&lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;novakov-alexey.github.io&amp;#x2F;processed_images&amp;#x2F;6e04fe6fb327c8e800.png&quot; class=&quot;center-image&quot;&#x2F;&gt;
&lt;br&#x2F;&gt;&lt;br&#x2F;&gt;
&lt;p&gt;I will clarify what other shapes dimensions mean further.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;cnn-topology&quot;&gt;CNN Topology&lt;&#x2F;h1&gt;
&lt;p&gt;We are going to design a simple CNN architecture for image recognition of the MNIST dataset. The problem type will be still the same:
predict a hand-written digit based on input image data. CNN works with image properties like height, width and color depth (RGB, etc.). 
Basically, it uses image pixel matrices to perform convolution and pooling operations. 
CNN works with every color channel separately. After some point, channels add up to each other using element-wise addition.&lt;&#x2F;p&gt;
&lt;p&gt;I am going to build CNN using my existing mini-library in Scala:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val cnn = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Sequential&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Precision&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Adam&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;HeNormal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](
    crossEntropy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;    learningRate &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;001&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;    metrics &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(accuracy)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;    batchSize &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;128&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;    gradientClipping &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; clipByNorm(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;    printStepTps &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= true
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)    
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;add(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Conv2D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(relu&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; kernel &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; strides &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)))    
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;add(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;MaxPool&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(strides &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; pool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; padding &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;))       
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;add(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Flatten2D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;())
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;add(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Dense&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(relu&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;50&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;))      
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;add(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Dense&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(softmax&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There are 3 more layers that we have not seen before. &lt;&#x2F;p&gt;
&lt;h2 id=&quot;convolution-layer&quot;&gt;Convolution Layer&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;Conv2D&lt;&#x2F;code&gt; is a Scala case class which has already familiar to us &lt;code&gt;relu&lt;&#x2F;code&gt; parameter as an activation function. Other unique parameters of convolution layer:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;filterCount = 8&lt;&#x2F;code&gt; - number of filters which are going to be trained&#x2F;optimised via gradient descent and back-propagation&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;kernel  = (5, 5)&lt;&#x2F;code&gt; - window height and width to apply on input image&#x2F;matrix&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;strides = (1, 1)&lt;&#x2F;code&gt; - increment value when moving filter over the input image&#x2F;matrix to the right &lt;code&gt;(1&lt;&#x2F;code&gt; and to the bottom &lt;code&gt;1)&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;While implementing CNN we are going to enter the world of 4-dimensional tensors. &lt;code&gt;Conv2D&lt;&#x2F;code&gt; layer will keep its data in 4D Tensor where:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;1st dimension is filter count&lt;&#x2F;li&gt;
&lt;li&gt;2nd - color depth. Grey scale image is 1, RGB is 3, RGBA is 4 and so on.&lt;&#x2F;li&gt;
&lt;li&gt;3rd - filter height&lt;&#x2F;li&gt;
&lt;li&gt;4th - filter width&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;According to above code snippet, added filter will have the following trainable weights and biases:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;weights shape: (8 x 1 x 5 x 5) &lt;code&gt;Tensor4D&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;biases shape: (8) &lt;code&gt;Tensor1D&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;example&quot;&gt;Example&lt;&#x2F;h3&gt;
&lt;p&gt;If we take simple example as image matrix 3 x 4 and filter with weights set from &lt;code&gt;1&lt;&#x2F;code&gt; to &lt;code&gt;4&lt;&#x2F;code&gt; then we get the following output as &lt;code&gt;z&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;novakov-alexey.github.io&amp;#x2F;processed_images&amp;#x2F;8bf50998c169227100.png&quot; class=&quot;center-image&quot;&#x2F;&gt;
&lt;br&#x2F;&gt;&lt;br&#x2F;&gt;
&lt;p&gt;z value at (0, 0) position is elementwise multiplication and then sum of the elements of the matrix such as&lt;br &#x2F;&gt;
&lt;code&gt;1 * 1 + 2 * 2 + 3 * 2 + 3 * 4 = 23&lt;&#x2F;code&gt;. Other output elements of the &lt;code&gt;z&lt;&#x2F;code&gt; matrix are produced in the same way.&lt;&#x2F;p&gt;
&lt;p&gt;Every layer that we add to &lt;code&gt;Sequential&lt;&#x2F;code&gt; model has at least two methods &lt;code&gt;apply&lt;&#x2F;code&gt;, 
which is used to do forward propagation and &lt;code&gt;backward&lt;&#x2F;code&gt; for producing gradients based on the layer input data.&lt;&#x2F;p&gt;
&lt;p&gt;We can code forward propagation like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; create input image regions with their positions to be used by other functions
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;private def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;imageRegions&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(image: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor2D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;kernel: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;stride: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=
  val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;rows&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;cols&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; image&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;shape2D    
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; i &amp;lt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; to rows - kernel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;_1 by stride&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;_1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;yield   
  for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; j &amp;lt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; to cols - kernel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;_2 by stride&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;_2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;yield       
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(image&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;slice((i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; i + kernel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;_1)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(j&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; j + kernel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;_2))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;as2D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; j)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; convolution operation which is
&#x2F;&#x2F; element-wise multiplication between each image region and filter matrix
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;private def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;conv&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(filterChannel: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor2D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;imageChannel: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor2D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, 
         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;kernel: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;stride: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=    
  val filtered = 
    for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; row &amp;lt;- imageRegions(imageChannel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; kernel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; stride) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;yield
      for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(region&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;) &amp;lt;- row &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;yield
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(region |*| filterChannel)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;sum

  filtered&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;as2D

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; main forward function which is used by Conv2D layer to 
&#x2F;&#x2F; apply every filter channel matrix to every input image.
&#x2F;&#x2F; N.B. convoluted channels adds us together
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;private def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;forward&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(kernel: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;stride: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, 
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;x: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;w: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;b: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=
  val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;images&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;filters&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;as4D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;as4D)    
   
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;filterImage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(image: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]]]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;    filters&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;zip(b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;as1D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;data)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;map { (f, b) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;
      val filtered =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;zip(image)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;map { (fc, ic) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;         conv(fc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;as2D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; ic&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;as2D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; kernel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; stride)
      }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;reduce(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
      filtered + b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;asT
    }
   
  images&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;par&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;map(filterImage)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;toArray&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;as4D

 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; Layer interface to the training loop. 
 &#x2F;&#x2F; `w` and `b` are the Layer state.
 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;override def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;apply&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(x: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Activation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=
   val z = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; b) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;match
     case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(w)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(b)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; forward(kernel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; strides&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; b)
     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;case _ =&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; does nothing when one of the params is empty    
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val a =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; f(z)    
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Activation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; z&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; a)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I have left &lt;code&gt;private&lt;&#x2F;code&gt; modifier to show you that &lt;code&gt;apply&lt;&#x2F;code&gt; function uses other functions internally.&lt;&#x2F;p&gt;
&lt;p&gt;In general, forward propagation of the Convolution layer is not that simple as for Dense layer. 
Convolution layer is also computationally intensive in forward and backward propagation.&lt;&#x2F;p&gt;
&lt;p&gt;The main line of code in forward propagation is &lt;code&gt;(region |*| filterChannel).sum&lt;&#x2F;code&gt;. It corresponds to element-wise multiplication of two matrices and summing the resulting matrix up
to get single number as one of the value for the output matrix. &lt;&#x2F;p&gt;
&lt;p&gt;Tensor shape of the forward propagation can be calculated in advance using the following formula:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val rows = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(height - kernel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;_1) &#x2F; strides&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;_1 + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val cols = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(width - kernel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;_2) &#x2F; strides&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;_2 + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; final output shape after layer activation is
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val shape = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(images&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; filterCount&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; rows&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; cols)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;images&lt;&#x2F;code&gt; is a number of images passed via &lt;code&gt;apply&lt;&#x2F;code&gt;, i.e. during the forward propagation. That means we can process a batch of images at once, i.e. at a step. 
We use similar idea in Dense layers via 2D Tensor to pass multiple images as rows at once (see further).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;pooling-layer&quot;&gt;Pooling Layer&lt;&#x2F;h2&gt;
&lt;p&gt;Typical pooling layer that is used for CNN is Max Pooling. As denoted by its name, it pools maximum elements from some image region to place it into the output matrix.&lt;&#x2F;p&gt;
&lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;novakov-alexey.github.io&amp;#x2F;processed_images&amp;#x2F;152d8f24e51ee71b00.png&quot; class=&quot;center-image&quot;&#x2F;&gt;
&lt;br&#x2F;&gt;&lt;br&#x2F;&gt;
&lt;p&gt;Although above example is quite simple, it shows the idea how forward propagation of &lt;code&gt;MaxPool&lt;&#x2F;code&gt; layer works. Basically, it downsamples input image resolution and takes the most
bright pixels.&lt;&#x2F;p&gt;
&lt;p&gt;Here is how we can code max pooling forward propagation:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; shape2D is output shape of this layer
&#x2F;&#x2F; this function creates image regions from the input X
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;private def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;imageRegions&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(image: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor2D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;window: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;strides: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=
  val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;rows&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;cols&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; shape2D
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; i &amp;lt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; until rows by strides&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;_1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;yield   
    for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; j &amp;lt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; until cols by strides&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;_2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;yield          
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(image&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;slice((i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; i + window&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;_1)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(j&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; j + window&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;_2))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;as2D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; j)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; main function to find max element in the region
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;private def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;poolMax&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(image: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor2D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor2D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=
  val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;rows&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;cols&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; shape2D
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val out = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;ofDim(rows&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; cols)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val pooled = 
    for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(region&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;j) &amp;lt;- imageRegions(image&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; window&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; strides)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;flatten &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;yield            
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;      out(i)(j) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; region&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;max
  out&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;as2D

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; Layer interface to forward propagation
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;apply&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(x: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Activation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=    
  val pooled =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;as4D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;map(c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; poolMax(c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;as2D)))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;as4D
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Activation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; pooled&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; pooled)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;flatten2d&quot;&gt;Flatten2D&lt;&#x2F;h2&gt;
&lt;p&gt;Before we feed intermediate data from the Convolution and Pooling layers forward, we need to flatten every image to a vector. Image channels are going to be 
appended to each other to get a single vector per image.
Our Tensor4D becomes a Tensor2D, where every row is an image. It is going to be still a long row per image, but since we have done some convolutions on the input
image, such processed data helps a model to learn better and avoid overfitting. 
Again, real-life CNN network will have multiple convolution and pooling layers, which are not necessarily
decrease amount of features, but transform them to achieve better model regularisation.&lt;&#x2F;p&gt;
&lt;p&gt;This layer forward propagation is going to be very simple to implement:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;apply&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(x: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Activation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=
  val flat =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;as2D
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Activation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; flat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; flat)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Where &lt;code&gt;.as2D&lt;&#x2F;code&gt; is combining all nested arrays of 4D Tensor starting from axis = 1.&lt;&#x2F;p&gt;
&lt;p&gt;When we flatten input data we get 4232 long vector image. To summarise the Tensor shapes we get the following &lt;strong&gt;output&lt;&#x2F;strong&gt; shapes:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Conv2D shape: 128 x 8 x 24 x 24&lt;&#x2F;li&gt;
&lt;li&gt;MaxPool shape: 128 x 8 x 23 x 23&lt;&#x2F;li&gt;
&lt;li&gt;Flatten: 128 x 4232&lt;&#x2F;li&gt;
&lt;li&gt;Dense shape: 128 x 32&lt;&#x2F;li&gt;
&lt;li&gt;Dense shape: 128 x 1&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;summary&quot;&gt;Summary&lt;&#x2F;h1&gt;
&lt;p&gt;If I run training for 5 epochs it takes a lot time than before with ANN. &lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val model =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; cnn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;train(xTrain&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; yTrain&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; epochs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; shuffle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;First of all we have more feature now with CNN = 4232 to learn in fully-connected layers.
But the main slowness comes from the forward and backward computation of the convolutional and pooling layers. They are much slower than simple dense layer matrix multiplication.&lt;&#x2F;p&gt;
&lt;p&gt;This takes up to 1 hour to train on MNIST on 50k images. The highest accuracy score I got was 92%, which is much lower than with ANN = 98.5%. 
As we have too few layers and most probably exploding&#x2F;vanishing gradient I could not better result with CNN. However, it is quite possible to get
that with production libraries like Tensorflow, where you will get 98% accuracy or higher using the same architecture that I used in this article.&lt;&#x2F;p&gt;
&lt;p&gt;If you are curious to know how back-propagation is done for Flatten, MaxPool and Conv layers feel free to look at the code of &lt;code&gt;backward&lt;&#x2F;code&gt; methods &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;novakov-alexey&#x2F;deep-learning-scala&#x2F;blob&#x2F;master&#x2F;src&#x2F;main&#x2F;scala&#x2F;ml&#x2F;network&#x2F;layers.scala&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;links&quot;&gt;Links&lt;&#x2F;h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;novakov-alexey&#x2F;deep-learning-scala&quot;&gt;Library source code&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.researchgate.net&#x2F;figure&#x2F;The-convolutional-neural-network-CSI-channel-state-information_fig2_333437070&quot;&gt;CNN Figure&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>MNIST image recognition using Deep Feed Forward Network</title>
		<published>2021-03-12T00:00:00+00:00</published>
		<updated>2021-03-12T00:00:00+00:00</updated>
		<link href="https://novakov-alexey.github.io/ann-mnist/" type="text/html"/>
		<id>https://novakov-alexey.github.io/ann-mnist/</id>
		<content type="html">&lt;p&gt;Deep Feed Forward Neural Network is one of the type of Artificial Neural Networks, which is also able to classify computer images.
In order to feed pixel data into the neural net in RBG&#x2F;Greyscale&#x2F;other format one can map every pixel to network inputs.
That means every pixel becomes a feature. It may sound scary and highly inefficient to feed, let&#x27;s say, 28 hieght on 28 width image size, which is 784 features to learn from.
However, neural networks can learn from the pixel data successfully and classify unseen data. We are going to prove this.&lt;&#x2F;p&gt;
&lt;p&gt;Please note, there are additional type of networks which are more efficient in image classification such as Convolutional Neural Network, but we are going to talk about that next time.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;dataset&quot;&gt;Dataset&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;upload.wikimedia.org&#x2F;wikipedia&#x2F;commons&#x2F;2&#x2F;27&#x2F;MnistExamples.png&quot; alt=&quot;Wikipedia MnistExamples&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;MNIST_database&quot;&gt;MNIST dataset&lt;&#x2F;a&gt; is a &amp;quot;Hello, World!&amp;quot; dataset in the field of Deep Learning. 
It consists of thousands of grey-scaled images which represent hand-written digits from 0 to 9,
so 10 labels. This dataset is used by many researches in the field to evaluate their discoveries and test that on well-known dataset. 
However, MNIST dataset should not be a panacea. There are other public datasets with images like ImageNet, AlexNet, etc., 
which are more advanced as they have more objects than just hand-written digits.
Nevertheless, MNIST made important contribution to the history of Deep Learning and still helps people to learn this field by playing with this dataset.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;loading-data&quot;&gt;Loading Data&lt;&#x2F;h1&gt;
&lt;p&gt;MNIST dataset can be taken from Yann LeCun web-site: &lt;a href=&quot;http:&#x2F;&#x2F;yann.lecun.com&#x2F;exdb&#x2F;mnist&#x2F;&quot;&gt;http:&#x2F;&#x2F;yann.lecun.com&#x2F;exdb&#x2F;mnist&#x2F;&lt;&#x2F;a&gt;. If it is unavailable, you can easily find
a copy of this dataset in numerous GitHub repositories, since it is not big in size (for example &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;turkdogan&#x2F;mnist-data-reader&#x2F;tree&#x2F;master&#x2F;data&quot;&gt;here&lt;&#x2F;a&gt;). I have downloaded the following 4 archives and put into the folder &lt;code&gt;images&lt;&#x2F;code&gt;. &lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;9.5M&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; train-images-idx3-ubyte.gz
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;28K&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;  train-labels-idx1-ubyte.gz

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;1.6M&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; t10k-images-idx3-ubyte.gz
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;4.4K&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; t10k-labels-idx1-ubyte.gz
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;First two files is training dataset. Bigger file is for images and smaller is for labels. There are 60000 training images and labels for them.
Next two files are for model testing following the same concept (images, labels). There are 10000 testing images and labels.&lt;&#x2F;p&gt;
&lt;p&gt;In order to load these files into the  memory we need to follow MNIST file format specification.
For each file we need to do:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Read first magic number and compare it with MNIST expected number, which is:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val LabelFileMagicNumber = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;2049
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val ImageFileMagicNumber = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;2051
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Read next number for number of rows &lt;&#x2F;li&gt;
&lt;li&gt;Read next number for number of columns&lt;&#x2F;li&gt;
&lt;li&gt;Read images and labels in the loop based on the number of rows and columns&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;We are going to implement MNIST classification on top of the existing &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;novakov-alexey&#x2F;deep-learning-scala&quot;&gt;mini-libary for Deep Learning&lt;&#x2F;a&gt;.
Here is how we can load MNIST dataset:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; scala&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;collection&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;mutable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;ArrayBuffer
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; scala&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;reflect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;ClassTag

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; java&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;io&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;{DataInputStream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; BufferedInputStream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; FileInputStream}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; java&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;nio&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;{Files&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; Path}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; java&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;util&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;zip&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;GZIPInputStream

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;loadDataset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ClassTag&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](images: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;labels: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)(
    using n: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Numeric&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]
  ): (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=

  val imageStream = new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;GZIPInputStream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Files&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;newInputStream(images))
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val imageInputStream = new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;DataInputStream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;BufferedInputStream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(imageStream))
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val magicNumber =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; imageInputStream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;readInt()
  
  assert(magicNumber &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ImageFileMagicNumber&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, 
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;Images magic number is incorrect, expected $ImageFileMagicNumber, 
    but was $magicNumber&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val numberOfImages =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; imageInputStream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;readInt()
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;nRows&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;nCols&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(imageInputStream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;readInt()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; imageInputStream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;readInt())

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val labelStream = new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;GZIPInputStream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Files&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;newInputStream(labels))
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val labelInputStream = new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;DataInputStream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;BufferedInputStream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(labelStream))  
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val labelMagicNumber =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; labelInputStream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;readInt()

  assert(labelMagicNumber &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;LabelFileMagicNumber&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, 
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;Labels magic number is incorrect, expected $LabelFileMagicNumber, 
    but was $labelMagicNumber&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val numberOfLabels =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; labelInputStream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;readInt()

  assert(numberOfImages &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; numberOfLabels)
  
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val labelsTensor =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; labelInputStream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;readAllBytes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;map(l &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;fromInt(l))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;as1D

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val singeImageSize =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; nRows * nCols
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val imageArray = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ArrayBuffer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;empty[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]]

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; i &amp;lt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; until numberOfImages) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;do
    val image = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; until singeImageSize)
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;_ =&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;fromInt(imageInputStream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;readUnsignedByte()))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;toArray      
    imageArray += image

  (imageArray&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;toArray&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;as2D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; labelsTensor)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h1 id=&quot;preparing-data&quot;&gt;Preparing data&lt;&#x2F;h1&gt;
&lt;p&gt;Before we construct a neural network to train it on MNIST dataset, we need to transform it a bit.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;feature-normalisation&quot;&gt;Feature normalisation&lt;&#x2F;h2&gt;
&lt;p&gt;In order to be more efficient when learning weights we need to scale X data to be in [0, 1] data range.
We know that every image is encoded as a matrix of pixels 28 x 28. If print one of the
image data into the console with line breaks after 28-th element, then it will look like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;   0   0   0   0   0  84 185 159 151  60  36   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;   0   0   0   0   0 222 254 254 254 254 241 198 198 198 198 198 198 198 198 170  52   0   0   0   0   0   0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;   0   0   0   0   0  67 114  72 114 163 227 254 225 254 254 254 250 229 254 254 140   0   0   0   0   0   0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;   0   0   0   0   0   0   0   0   0   0  17  66  14  67  67  67  59  21 236 254 106   0   0   0   0   0   0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0  83 253 209  18   0   0   0   0   0   0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0  22 233 255  83   0   0   0   0   0   0   0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 129 254 238  44   0   0   0   0   0   0   0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0  59 249 254  62   0   0   0   0   0   0   0   0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 133 254 187   5   0   0   0   0   0   0   0   0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;   0   0   0   0   0   0   0   0   0   0   0   0   0   0   9 205 248  58   0   0   0   0   0   0   0   0   0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;   0   0   0   0   0   0   0   0   0   0   0   0   0   0 126 254 182   0   0   0   0   0   0   0   0   0   0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;   0   0   0   0   0   0   0   0   0   0   0   0   0  75 251 240  57   0   0   0   0   0   0   0   0   0   0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;   0   0   0   0   0   0   0   0   0   0   0   0  19 221 254 166   0   0   0   0   0   0   0   0   0   0   0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;   0   0   0   0   0   0   0   0   0   0   0   3 203 254 219  35   0   0   0   0   0   0   0   0   0   0   0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;   0   0   0   0   0   0   0   0   0   0   0  38 254 254  77   0   0   0   0   0   0   0   0   0   0   0   0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;   0   0   0   0   0   0   0   0   0   0  31 224 254 115   1   0   0   0   0   0   0   0   0   0   0   0   0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;   0   0   0   0   0   0   0   0   0   0 133 254 254  52   0   0   0   0   0   0   0   0   0   0   0   0   0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;   0   0   0   0   0   0   0   0   0  61 242 254 254  52   0   0   0   0   0   0   0   0   0   0   0   0   0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;   0   0   0   0   0   0   0   0   0 121 254 254 219  40   0   0   0   0   0   0   0   0   0   0   0   0   0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;   0   0   0   0   0   0   0   0   0 121 254 207  18   0   0   0   0   0   0   0   0   0   0   0   0   0   0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Above output corresponds to digit &amp;quot;7&amp;quot;.&lt;&#x2F;p&gt;
&lt;p&gt;Data in 0-255 numeric range will explode our network gradient if we do not apply any optimization technique on
gradient or weight values. The easiest way is to scale the input data.&lt;&#x2F;p&gt;
&lt;p&gt;First we load data using previously defined function with one more case class as a wrapper:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val dataset = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;MnistLoader&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;loadData[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Double&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;images&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;where &lt;code&gt;dataset&lt;&#x2F;code&gt; is wrapped into a case class:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt; MnistDataset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Numeric&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](
  trainImage: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, 
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;trainLabels: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, 
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;testImages: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, 
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;testLabels: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;])
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then we simply divide every value by 255, that gives data in [0,1] range format.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val xData =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; dataset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;trainImage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;255&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)  
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;target-encoding&quot;&gt;Target Encoding&lt;&#x2F;h2&gt;
&lt;p&gt;Our model is going to predict one label over multi-class dataset. In order to make our neural network 
to predict something we need to encode label tensor with &lt;code&gt;One-Hot encoder&lt;&#x2F;code&gt;, so that every scalar label becomes as
a vector of zeros and a single &lt;code&gt;1&lt;&#x2F;code&gt;. Index of &lt;code&gt;1&lt;&#x2F;code&gt; corresponds to the digit that this label stores.&lt;&#x2F;p&gt;
&lt;p&gt;MNIST data is currently a vector of numbers, where number is a label for hand-written digit. For example:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;1]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Once we one-hot encode it, it will look like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;0]
[0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;0]
[1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;0]
[0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;0]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can reuse &lt;a href=&quot;https:&#x2F;&#x2F;novakov-alexey.github.io&#x2F;ann-in-scala-2&#x2F;#data-preparation&quot;&gt;OneHotEncoder&lt;&#x2F;a&gt; implemented earlier:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val encoder = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;OneHotEncoder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(classes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; to &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;map(i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;toDouble&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;toDouble))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;toMap)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val yData =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; encoder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;transform(dataset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;trainLabels&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;as1D)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;common-preparation&quot;&gt;Common preparation&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s wrap both transformation into one function:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;prepareData&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(x: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Double&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;y: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Double&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=
  val xData =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;255&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; normalize to [0,1] range
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val yData =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; encoder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;transform(y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;as1D)
  (xData&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; yData)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we can call it like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;xTrain&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;yTrain&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; prepareData(dataset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;trainImage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; dataset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;trainLabels)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h1 id=&quot;model-construction&quot;&gt;Model construction&lt;&#x2F;h1&gt;
&lt;p&gt;Our model is going to be designed&#x2F;trained with:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;nodes: 784 x 100 x 10&lt;&#x2F;li&gt;
&lt;li&gt;activation: ReLU, Softmax&lt;&#x2F;li&gt;
&lt;li&gt;loss: cross-entropy&lt;&#x2F;li&gt;
&lt;li&gt;accuracy: via argmax&lt;&#x2F;li&gt;
&lt;li&gt;initialisation: &lt;a href=&quot;https:&#x2F;&#x2F;arxiv.org&#x2F;abs&#x2F;1502.01852&quot;&gt;Kaiming&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;optimizer: Adam&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val ann = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Sequential&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Double&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Adam&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;HeNormal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](
  crossEntropy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;  learningRate &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;001&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;  metrics &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(accuracy)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;  batchSize &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;128&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;  gradientClipping &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; clipByValue(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;add(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Dense&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(relu&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;))      
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;add(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Dense&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(softmax&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;a href=&quot;&#x2F;adam-optimizer&#x2F;&quot;&gt;Adam&lt;&#x2F;a&gt; optimizer gets better results on MNIST data, so we stick to it, rather than with standard Stochastic Gradient Descent.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;activations&quot;&gt;Activations&lt;&#x2F;h2&gt;
&lt;p&gt;We have already seen &lt;code&gt;ReLU&lt;&#x2F;code&gt; activation function, but let&#x27;s recall its definition:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;relu&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ClassTag&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](x: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;])(using n: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Numeric&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;  x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;map(t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; max(n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;zero&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; t))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Important note here that it is applied element-wise, i.e. for every element of &lt;code&gt;z&lt;&#x2F;code&gt; matrix in the layer.&lt;&#x2F;p&gt;
&lt;p&gt;However, &lt;code&gt;softmax&lt;&#x2F;code&gt; activation function is &lt;strong&gt;applied across nodes&lt;&#x2F;strong&gt; of the layer to get the probability which sums up to &lt;code&gt;1&lt;&#x2F;code&gt;.
This activation function is a typical choice for multi-class problem type. When we feed input data sample into the network, 
we want to get an output as vector with probabilities for each class.&lt;&#x2F;p&gt;
&lt;p&gt;Coming back to MNIST target, below representation shows that most likely the target value is digit &amp;quot;4&amp;quot;, 
because the highest argument is &amp;quot;0.5&amp;quot; at index [4].&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;scala&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;01&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;01&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;02&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;03&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;01&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;02&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;sum
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val res0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Double = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is how we can implement &lt;code&gt;softmax&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val toleration =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; castFromTo[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Double&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;4E-15&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;softmax&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(x: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=       
  val applied =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;mapRow { row &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;
    val max =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; row&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;max        
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val expNorm =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; row&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;map(v &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; exp(v - max))         
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val sum =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; expNorm&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;sum        
    expNorm&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &#x2F; sum)
  }
  
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; rest is an extra defence against numeric overflow
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val appliedSum =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; applied&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;sumCols&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;map( v &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt; 
    if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;abs - toleration &amp;gt; n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;one 
    then v 
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;one
  )
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val totalSum =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; appliedSum&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;sumRows&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;as0D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;data      
  assert(totalSum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, 
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;Softmax distribution sum is not equal to 1 at some activation, but&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;${appliedSum}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
  
  applied
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It is obviously more complicated than &lt;code&gt;relu&lt;&#x2F;code&gt;. This is what the above code is doing:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;For each &lt;code&gt;row: Array[T]&lt;&#x2F;code&gt; of the &lt;code&gt;x&lt;&#x2F;code&gt; Tensor we find a max value and substract it from each value of this row to get stable values in the vector.
&lt;a href=&quot;https:&#x2F;&#x2F;stats.stackexchange.com&#x2F;a&#x2F;338293&quot;&gt;The reason&lt;&#x2F;a&gt; to subtract &lt;code&gt;max&lt;&#x2F;code&gt; is to avoid numeric overflow.&lt;&#x2F;li&gt;
&lt;li&gt;Apply exponent to each value right after the &lt;code&gt;max&lt;&#x2F;code&gt; subtraction.&lt;&#x2F;li&gt;
&lt;li&gt;Make a sum of exponents.&lt;&#x2F;li&gt;
&lt;li&gt;Finally, use exponent vector to divide each value by the &lt;code&gt;sum&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Additionally, we raise an error if a sum of individual values in
the vector is not equal to &lt;code&gt;1&lt;&#x2F;code&gt;. Such situation may happen 
due to numeric overflow. If it happens, then we may end up with exploding gradient (as a result bad training outcome).
However, we tolerate numeric difference of &lt;code&gt;0.4E-15d&lt;&#x2F;code&gt;, i.e. it should be no more than &lt;code&gt;1.0000000000000004&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;In order to perform back-propagation with gradient descent we need &lt;code&gt;softmax&lt;&#x2F;code&gt; derivative as well. 
This is simplest version of softmax derivative:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;derivative&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(x: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=       
  val sm =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; softmax(x)      
  sm&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;multiply(n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;one - sm) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; element-wise multiplication, NOT dot product
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;loss-function&quot;&gt;Loss function&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;Cross-entropy&lt;&#x2F;code&gt; can then be used to calculate the difference between the two probability distributions and 
typical choice for multi-class classification. It can written in code as:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;crossEntropy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ClassTag&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Numeric&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](y: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;yHat: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;  y * log(yHat)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It will return some value as a as difference. Example of input vectors:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;some random yHat = [0.1, 0.1, 0, 0.8, ...] - it will be length of 10 in our MNIST case
        actual y = [0, 0, 0, 1, ........ ] - length 10
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To get an idea whey cross-entropy is a usefull loss function to our problem, please have a look at this &lt;a href=&quot;https:&#x2F;&#x2F;machinelearningmastery.com&#x2F;cross-entropy-for-machine-learning&#x2F;&quot;&gt;blog-post&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;accuracy&quot;&gt;Accuracy&lt;&#x2F;h2&gt;
&lt;p&gt;Before we calculate a number of correct predictions, we need to not just compare &lt;code&gt;y&lt;&#x2F;code&gt; and &lt;code&gt;yHat&lt;&#x2F;code&gt; vectors, 
but first need to find an index of the max element in the &lt;code&gt;y&lt;&#x2F;code&gt; and &lt;code&gt;yHat&lt;&#x2F;code&gt; vectors.&lt;&#x2F;p&gt;
&lt;p&gt;So we need to help the existing algorithm to extract from the &lt;code&gt;yHat&lt;&#x2F;code&gt; vector the value of the label, i.e. predicted digit. 
Function called &lt;code&gt;argmax&lt;&#x2F;code&gt; can be used for this task:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;accuracyMnist&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ClassTag&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Ordering&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](using n: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Numeric&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Metric&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]:
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val name = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;accuracy&amp;quot;
  
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;matches&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(actual: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;predicted: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int =      
    val predictedArgMax =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; predicted&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;argMax      
    actual&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;argMax&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;equalRows(predictedArgMax)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val accuracy =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; accuracyMnist[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Double&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Accuracy is a &lt;code&gt;Metric&lt;&#x2F;code&gt; type-class that has &lt;code&gt;matches&lt;&#x2F;code&gt; method to return a number of correct predictions.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;argMax&lt;&#x2F;code&gt; itself as generic tensor function:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;argMax&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ClassTag&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](t: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;])(using n: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Numeric&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=
  def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;maxIndex&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(a: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;    n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;fromInt(a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;indices&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;maxBy(a))

  t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;match
    case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor2D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(data) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor1D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;map(maxIndex))
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor1D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(data) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor0D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(maxIndex(data))
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor0D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; t
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;weight-initialisation&quot;&gt;Weight Initialisation&lt;&#x2F;h2&gt;
&lt;p&gt;Weight initialisation approach is important factor in Deep Learning to converge model training faster or even to avoid &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Vanishing_gradient_problem&quot;&gt;vanished or exploded gradient&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Kaiming&lt;&#x2F;code&gt; weight initialisation is helping to address above problems. So let&#x27;s use that as well:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;given [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ClassTag&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Numeric&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ParamsInitializer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;HeNormal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] with    
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val rnd = new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Random&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;() 

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;gen&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(lenght: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;    castFromTo[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Double&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]{
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val v =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; rnd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;nextGaussian + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;001&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;d &lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; value shift is optional
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;      v * math&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;sqrt(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &#x2F; lenght&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;toDouble)
    }

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;override def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;weights&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(rows: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;cols: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor2D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;fill(rows)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;fill[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](cols)(gen(rows))))

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;override def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;biases&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(length: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;    zeros(length)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We initialise biases to zeros. Weight matrices are initialised using random generator with normal distribution. Every random number then
multiplied by &lt;code&gt;sqrt(2 &#x2F; n)&lt;&#x2F;code&gt;, where n is a number of input nodes for this particular layer.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;model-training&quot;&gt;Model Training&lt;&#x2F;h1&gt;
&lt;p&gt;Now we are ready to start training process.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val model =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; ann&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;train(xTrain&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; yTrain&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; epochs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;15&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; shuffle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 1&#x2F;15, avg. loss: 0.04434336993179046, metrics: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;accuracy: 0.8785666666666667&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 2&#x2F;15, avg. loss: 0.024939809896450383, metrics: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;accuracy: 0.9350166666666667&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 3&#x2F;15, avg. loss: 0.02028075875579972, metrics: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;accuracy: 0.9478833333333333&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 4&#x2F;15, avg. loss: 0.017196840063260558, metrics: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;accuracy: 0.9560833333333333&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 5&#x2F;15, avg. loss: 0.01491209973340988, metrics: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;accuracy: 0.9625666666666667&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 6&#x2F;15, avg. loss: 0.01350024657628137, metrics: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;accuracy: 0.9671833333333333&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 7&#x2F;15, avg. loss: 0.01222168129663168, metrics: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;accuracy: 0.9699&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 8&#x2F;15, avg. loss: 0.011222418180870991, metrics: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;accuracy: 0.9729833333333333&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 9&#x2F;15, avg. loss: 0.010388172803460627, metrics: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;accuracy: 0.9752833333333333&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 10&#x2F;15, avg. loss: 0.009549474708521941, metrics: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;accuracy: 0.97765&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 11&#x2F;15, avg. loss: 0.008920235294999721, metrics: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;accuracy: 0.9787&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 12&#x2F;15, avg. loss: 0.008214811390229967, metrics: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;accuracy: 0.9806833333333334&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 13&#x2F;15, avg. loss: 0.0077112882811408694, metrics: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;accuracy: 0.9824&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 14&#x2F;15, avg. loss: 0.0071559669134910325, metrics: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;accuracy: 0.98405&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 15&#x2F;15, avg. loss: 0.006797865863855411, metrics: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;accuracy: 0.9848&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We have gotten quite good accuracy on training. 
98.4% correct predictions, which is 1.6% errors.&lt;&#x2F;p&gt;
&lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;novakov-alexey.github.io&amp;#x2F;processed_images&amp;#x2F;cb64caacec83f77700.png&quot; class=&quot;center-image&quot;&#x2F;&gt;
&lt;br&#x2F;&gt;&lt;br&#x2F;&gt;
&lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;novakov-alexey.github.io&amp;#x2F;processed_images&amp;#x2F;58b53c0bd1cf8ad200.png&quot; class=&quot;center-image&quot;&#x2F;&gt;
&lt;br&#x2F;&gt;&lt;br&#x2F;&gt;
&lt;h1 id=&quot;model-testing&quot;&gt;Model Testing&lt;&#x2F;h1&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;xTest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;yTest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; prepareData(dataset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;testImages&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; dataset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;testLabels)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val testPredicted =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; model(xTest)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val value =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; accuracy(yTest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; testPredicted)
println(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;test accuracy = $value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Accuracy on test data is quite close to the train accuracy:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; accuracy = 0.9721
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can also try to run a single test on the first image from the test dataset:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val singleTestImage =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; dataset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;testImages&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;as2D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;head
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val label =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; dataset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;testLabels&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;as1D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;head &lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; this must be &amp;quot;7&amp;quot; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val predicted =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; model(singleTestImage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;as2D)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;argMax&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;as0D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;data  

assert(label &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; predicted&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, 
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;Predicted label is not equal to expected &amp;#39;$label&amp;#39; label, but was &amp;#39;$predicted&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)

println(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;predicted = $predicted&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;predicted &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h1 id=&quot;summary&quot;&gt;Summary&lt;&#x2F;h1&gt;
&lt;p&gt;We have seen that even one hidden layer is able to classify MNIST dataset with quite low error rate. 
Key takeaways when classifying images are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;make sure that gradient is not going to explode or vanish. For that, we can use proper weight initialisation, 
clipping gradient by value or norm any other weight normalisation during the training. Also scale or normalise the input data&lt;&#x2F;li&gt;
&lt;li&gt;use one-hot encoding for your target variable in case of multi-class classification&lt;&#x2F;li&gt;
&lt;li&gt;in case of single label prediction, use &lt;code&gt;argmax&lt;&#x2F;code&gt; function&lt;&#x2F;li&gt;
&lt;li&gt;use &lt;code&gt;softmax&lt;&#x2F;code&gt; activation at the last layer to distribute probabilities across classes.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Try &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Convolutional_neural_network&quot;&gt;Convolutional Neural Network&lt;&#x2F;a&gt; as a next step in image classification problem.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;links&quot;&gt;Links&lt;&#x2F;h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;novakov-alexey&#x2F;deep-learning-scala&quot;&gt;Source code of mini-library: deep-learning-scala&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;towardsdatascience.com&#x2F;mnist-handwritten-digits-classification-from-scratch-using-python-numpy-b08e401c4dab&quot;&gt;MNIST Handwritten digits classification from scratch using Python Numpy&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;eliben&#x2F;deep-learning-samples&#x2F;blob&#x2F;d5ca86c5db664fabfb302cbbc231c50ec3d6a103&#x2F;softmax&#x2F;softmax.py#L84&quot;&gt;softmax.py eliben&#x2F;deep-learning-samples&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Linear Regression with Adam Optimizer</title>
		<published>2021-02-24T00:00:00+00:00</published>
		<updated>2021-02-24T00:00:00+00:00</updated>
		<link href="https://novakov-alexey.github.io/adam-optimizer/" type="text/html"/>
		<id>https://novakov-alexey.github.io/adam-optimizer/</id>
		<content type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;arxiv.org&#x2F;pdf&#x2F;1412.6980.pdf&quot;&gt;Adam&lt;&#x2F;a&gt; is one more optimization algorithm used in neural networks. It is based on adaptive estimates of lower-order moments. It has more hyper-parameters than classic Gradient Descent to tune externally&lt;&#x2F;p&gt;
&lt;p&gt;Good default settings for the tested machine learning problems are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;α =  0.001, &#x2F;&#x2F; learning rate. We have already seen this one in classic Gradient Descent.&lt;&#x2F;li&gt;
&lt;li&gt;β&lt;sub&gt;1&lt;&#x2F;sub&gt; = 0.9,&lt;&#x2F;li&gt;
&lt;li&gt;β&lt;sub&gt;2&lt;&#x2F;sub&gt; = 0.999&lt;&#x2F;li&gt;
&lt;li&gt;eps = 10−8.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Values on the right-hand side are proposed in the paper. However, you should tune them on your data, 
also experiment with batch size and other parameters which may influence the Adam parameters.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;algorithm&quot;&gt;Algorithm&lt;&#x2F;h1&gt;
&lt;p&gt;Let&#x27;s look at original algorithm and then try to implement it in the code.&lt;&#x2F;p&gt;
&lt;p&gt;All operations on vectors are element-wise.  With β&lt;sub&gt;1&lt;&#x2F;sub&gt;&lt;sup&gt;t&lt;&#x2F;sup&gt; and β&lt;sub&gt;2&lt;&#x2F;sub&gt;&lt;sup&gt;t&lt;&#x2F;sup&gt; 
we denote β&lt;sub&gt;1&lt;&#x2F;sub&gt; and β&lt;sub&gt;2&lt;&#x2F;sub&gt; to the power of &lt;code&gt;t&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Require&lt;&#x2F;strong&gt;: α: Stepsize&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Require:&lt;&#x2F;strong&gt; β&lt;sub&gt;1&lt;&#x2F;sub&gt;, β&lt;sub&gt;2&lt;&#x2F;sub&gt; ∈[0,1): Exponential decay rates for the moment estimates&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Require&lt;&#x2F;strong&gt;: f(θ): Stochastic objective function with parameters θ &lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Require&lt;&#x2F;strong&gt;: θ&lt;sub&gt;0&lt;&#x2F;sub&gt;: Initial parameter vector&lt;&#x2F;p&gt;
&lt;p&gt;m&lt;sub&gt;0&lt;&#x2F;sub&gt; ← 0 (Initialize 1st moment vector)&lt;&#x2F;p&gt;
&lt;p&gt;v&lt;sub&gt;0&lt;&#x2F;sub&gt; ← 0 (Initialize 2nd moment vector)&lt;&#x2F;p&gt;
&lt;p&gt;t ← 0 (Initialize timestep)&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;while&lt;&#x2F;strong&gt; θ&lt;sub&gt;t&lt;&#x2F;sub&gt; not converged do &lt;&#x2F;p&gt;
&lt;p&gt;t ← t + 1&lt;&#x2F;p&gt;
&lt;p&gt;gt ← ∇θf&lt;sub&gt;t&lt;&#x2F;sub&gt; (θ&lt;sub&gt;t−1&lt;&#x2F;sub&gt;) (Get gradients w.r.t. stochastic objective at timestep t)&lt;&#x2F;p&gt;
&lt;p&gt;mt ← β&lt;sub&gt;1&lt;&#x2F;sub&gt; · m&lt;sub&gt;t−1&lt;&#x2F;sub&gt; + (1−β&lt;sub&gt;1&lt;&#x2F;sub&gt;) · gt (Update biased first moment estimate)&lt;&#x2F;p&gt;
&lt;p&gt;vt ← β&lt;sub&gt;2&lt;&#x2F;sub&gt; · v&lt;sub&gt;t&lt;&#x2F;sub&gt;−1 + (1−β&lt;sub&gt;2&lt;&#x2F;sub&gt;) · g&lt;sup&gt;2&lt;&#x2F;sup&gt;t (Update biased second raw moment estimate)̂ &lt;&#x2F;p&gt;
&lt;p&gt;mt ← m&lt;sub&gt;t&lt;&#x2F;sub&gt; &#x2F; (1−βt&lt;sub&gt;1&lt;&#x2F;sub&gt;) (Compute bias-corrected first moment estimate)̂&lt;&#x2F;p&gt;
&lt;p&gt;v&lt;sub&gt;t&lt;&#x2F;sub&gt; ← v&lt;sub&gt;t&lt;&#x2F;sub&gt; &#x2F; (1−βt&lt;sub&gt;2&lt;&#x2F;sub&gt;) (Compute bias-corrected second raw moment estimate)&lt;&#x2F;p&gt;
&lt;p&gt;θ&lt;sub&gt;t&lt;&#x2F;sub&gt; ← θ&lt;sub&gt;t−1&lt;&#x2F;sub&gt;−α·̂mt&#x2F;(√̂v&lt;sub&gt;t&lt;&#x2F;sub&gt; +eps) (Update parameters)&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;end while&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;return&lt;&#x2F;strong&gt; θ&lt;sub&gt;t&lt;&#x2F;sub&gt; (Resulting parameters)&lt;&#x2F;p&gt;
&lt;p&gt;At the last line we update parameters based on long chain of formulas which incorporate gradient and moments.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;implementation&quot;&gt;Implementation&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;changes-to-existing-library&quot;&gt;Changes to existing library&lt;&#x2F;h2&gt;
&lt;p&gt;In order to implement &lt;code&gt;Adam&lt;&#x2F;code&gt; for multi-layer neural network with backpropogation we will need to translate above algorithm to
linear algebra and Tensor API that we wrote in &lt;a href=&quot;..&#x2F;ann-in-scala-2&quot;&gt;previous articles&lt;&#x2F;a&gt;. Apart from that we would need to 
add additional state to &lt;code&gt;Layer&lt;&#x2F;code&gt; type:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt; Layer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](
    w: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;b: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;f: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ActivationFunc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ActivationFuncApi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;noActivation[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;units: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;state: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;OptimizerState&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;None &lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; additional property for an optimizer
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We assume that any optimizer may bring its own state apart of the usual weight and bias matrices, so we model 
new property as trait and add implementation for Adam:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;sealed trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt; OptimizerState&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt; AdamState&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](
    mw: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; 1st moment equal in shape to weight
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;vw: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; 2nd moment equal in shape to weight
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;mb: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; 1st moment equal in shape to bias
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;vb: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; 2nd moment equal in shape to bias
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;) extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;OptimizerState&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We also need to initialise this state properties with zeros. For that, we extend layer construction code to let the optimizer type class
to init its properties.&lt;&#x2F;p&gt;
&lt;p&gt;First, we change &lt;code&gt;add&lt;&#x2F;code&gt; method in the &lt;code&gt;Sequential&lt;&#x2F;code&gt; type:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(layer: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;LayerCfg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Sequential&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;U&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;  copy(layerStack &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(inputs) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val currentLayers =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; layerStack(inputs)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val prevInput =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; currentLayers&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;lastOption&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;units)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;getOrElse(inputs)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val w =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; random2D(prevInput&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; layer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;units)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val b =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; zeros(layer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;units)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; new line to init state for the chosen optimizer
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val optimizerState =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; optimizer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;initState(w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; b) 
    (currentLayers :+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Layer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; layer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; layer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;units&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; optimizerState))
  })
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Optimizer trait now gets additional method:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;initState&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ClassTag&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Numeric&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](
      w: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;b: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]
  ): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;OptimizerState&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;None
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Adam implementation for &lt;code&gt;initState&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;override def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;initState&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ClassTag&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Numeric&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](
    w: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, 
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;b: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;OptimizerState&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;AdamState&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;zero&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;zero&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;zero&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;zero))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;Tensor.zero&lt;&#x2F;code&gt; method creates new tensor with zeros using the same shape as original tensor.&lt;&#x2F;p&gt;
&lt;p&gt;Also, we need to keep Adam hyper-parameters somewhere. Let&#x27;s create &lt;code&gt;OptimizerCfg&lt;&#x2F;code&gt; class and Adam extension in it.
We could design custom configuration nicely, for example, using traits, but I have decided to make it &amp;quot;dirty&amp;quot; at the moment:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt; OptimizerCfg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ClassTag&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Fractional&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](
  learningRate: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;clip: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;GradientClipping&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;GradientClippingApi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;noClipping[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;adam: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;AdamCfg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]
)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt; AdamCfg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ClassTag&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](b1: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;b2: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;eps: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;update-weights-using-adam&quot;&gt;Update Weights using Adam&lt;&#x2F;h2&gt;
&lt;p&gt;We now have all abstraction in place as well as all parameters to implement Adam optimizer.
In fact, first part to calculate gradient (partial derivative) will be the same as in classic gradient descent algorithm.
Second part will be &lt;code&gt;Adam&#x27;s&lt;&#x2F;code&gt; own stuff:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;override def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;updateWeights&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ClassTag&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](
  layers: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Layer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;activations: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Activation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;error: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;c: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;OptimizerCfg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;timestep: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)(using n: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Fractional&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Layer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=
  val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;AdamCfg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;b1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;b2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;eps&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;adam        

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;correction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(gradient: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;m: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;v: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=        
    val mt = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(b1 * m) + ((n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;one - b1) * gradient)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val vt = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(b2 * v) + ((n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;one - b2) * gradient&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;sqr)        
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val mHat =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; mt :&#x2F; (n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;one - (b1 ** timestep))
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val vHat =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; vt :&#x2F; (n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;one - (b2 ** timestep))            

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val corr =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;learningRate *: (mHat &#x2F; (vHat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;sqrt + eps))
    (corr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; mt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; vt)
  
  layers
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;zip(activations)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;foldRight(
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;empty[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Layer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;      error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]]          
    ) {             
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(
          (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Layer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;u&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;AdamState&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(mw&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;vw&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;mb&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;vb)))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Activation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;z&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(ls&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;prevDelta&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;prevWeight)
        ) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;            
        val delta = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(prevWeight &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;match 
          case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(pw) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; prevDelta * pw&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T
          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;None     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; prevDelta
        ) multiply f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;derivative(z)        
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val wGradient =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;clip(x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; * delta)
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val bGradient =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;clip(delta)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;sum
        
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; Adam                        
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;corrW&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;weightM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;weightV&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; correction(wGradient&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; mw&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; vw)
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val newWeight =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; w - corrW

        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;corrB&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;biasM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;biasV&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; correction(bGradient&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;asT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; mb&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; vb)
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val newBias =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; b - corrB

        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val adamState = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;AdamState&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(weightM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; weightV&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; biasM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; biasV))
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val updated = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Layer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(newWeight&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; newBias&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; u&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; adamState) +: ls              
        (updated&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; delta&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(w))
        
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; sys&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;error(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;Adam optimizer require state, but was:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;$s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
    }
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;_1    
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The difference with classic gradient optimizer is:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;timestep&lt;&#x2F;code&gt; is an index across all training epochs and intermediate batches. Its range: &lt;code&gt;[1 .. epochs * data.length &#x2F; batchSize]&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;correction&lt;&#x2F;code&gt; function that goes after Adam paper to calculate final learning rate based on the weight or bias gradient.&lt;&#x2F;li&gt;
&lt;li&gt;We keep Adam moments for weight and bias &lt;code&gt;AdamState&lt;&#x2F;code&gt; as part of the Layer state across all learning epochs.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;There is an extension to Tensor API I have added to support element-wise operations like:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;division &lt;code&gt;def :&#x2F;(that: T): Tensor[T]&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;multiplication &lt;code&gt;(t: T) def *:(that: Tensor[T]): Tensor[T]&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;power: &lt;code&gt;def :**(to: Int): Tensor[T]&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;square: &lt;code&gt;def sqr: Tensor[T] = TensorOps.pow(t, 2)&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;sqrt: &lt;code&gt;def sqrt: Tensor[T] = TensorOps.sqrt(t)&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;visualisation&quot;&gt;Visualisation&lt;&#x2F;h1&gt;
&lt;p&gt;We are going to visualise Adam gradient trace to global minimum using &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cedricmjohn&#x2F;picta&quot;&gt;Picta&lt;&#x2F;a&gt;. So all we do is constructing ANN with Adam type parameter:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val ann = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Sequential&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Double&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Adam&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](
    meanSquareError&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;    learningRate &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0012&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,    
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;    batchSize &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;    gradientClipping &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; clipByValue(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
  )&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;add(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Dense&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;())    
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Loss surface:&lt;&#x2F;p&gt;
&lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;novakov-alexey.github.io&amp;#x2F;processed_images&amp;#x2F;83257dc61e2019a500.png&quot; class=&quot;center-image&quot;&#x2F;&gt;
&lt;br&#x2F;&gt;&lt;br&#x2F;&gt;
&lt;p&gt;Also, we going to compare it on the same data with classic Gradient Descent:&lt;&#x2F;p&gt;
&lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;novakov-alexey.github.io&amp;#x2F;processed_images&amp;#x2F;4d2ac51ee147ccf000.png&quot; class=&quot;center-image&quot;&#x2F;&gt;
&lt;br&#x2F;&gt;&lt;br&#x2F;&gt;
&lt;p&gt;Adam gradient starts a bit differently then classic gradient descent. Eventually, they both converges at the same point.&lt;&#x2F;p&gt;
&lt;p&gt;If we compare the speed of finding global minimum, then on my data and on the same learning hyper-parameters, classic Gradient Descent is faster:&lt;&#x2F;p&gt;
&lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;novakov-alexey.github.io&amp;#x2F;processed_images&amp;#x2F;4da0f771de31584b00.png&quot; class=&quot;center-image&quot;&#x2F;&gt;
&lt;br&#x2F;&gt;&lt;br&#x2F;&gt;
&lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;novakov-alexey.github.io&amp;#x2F;processed_images&amp;#x2F;8de7f50a22084bb300.png&quot; class=&quot;center-image&quot;&#x2F;&gt;
&lt;br&#x2F;&gt;&lt;br&#x2F;&gt;
&lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;novakov-alexey.github.io&amp;#x2F;processed_images&amp;#x2F;93cfa61bd011c7bf00.png&quot; class=&quot;center-image&quot;&#x2F;&gt;
&lt;br&#x2F;&gt;&lt;br&#x2F;&gt;
&lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;novakov-alexey.github.io&amp;#x2F;processed_images&amp;#x2F;2b10634dcaa631bb00.png&quot; class=&quot;center-image&quot;&#x2F;&gt;
&lt;br&#x2F;&gt;&lt;br&#x2F;&gt;
&lt;p&gt;We can see that orange line is slightly behind the blue one. Around &lt;code&gt;9th&lt;&#x2F;code&gt; learning epoch they are both in the same position.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;summary&quot;&gt;Summary&lt;&#x2F;h1&gt;
&lt;p&gt;We could easily extend existing library with one more optimizer such as Adam. It is quite popular optimizer nowadays as it shows
good result in the paper and in practise. Anyway, it did not show better results on my data comparing to classic gradient descent algorithm.
My experiment is not proving that Adam is not good, but it is just showing that in real life you need to experiment with 
different weight optimisers. Also, you should tune hyper-parameters for each algorithm separately, i.e. reuse of the same hyper-parameters
might not help to get the best results out of another optimizer you are currently trying.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;links&quot;&gt;Links&lt;&#x2F;h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;novakov-alexey&#x2F;deep-learning-scala&#x2F;blob&#x2F;master&#x2F;src&#x2F;main&#x2F;scala&#x2F;ml&#x2F;network&#x2F;optimizers.scala&quot;&gt;Source code - Optimizers&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;machinelearningmastery.com&#x2F;adam-optimization-from-scratch&#x2F;&quot;&gt;Reference Implementation for perceptron&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;arxiv.org&#x2F;pdf&#x2F;1412.6980.pdf&quot;&gt;Paper: Adam: a method for stochastic optimization&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gluon.mxnet.io&#x2F;chapter06_optimization&#x2F;adam-scratch.html&quot;&gt;MXNET: Adam from scratch&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Linear Regression with Gradient Descent</title>
		<published>2021-02-20T00:00:00+00:00</published>
		<updated>2021-02-20T00:00:00+00:00</updated>
		<link href="https://novakov-alexey.github.io/linear-regression/" type="text/html"/>
		<id>https://novakov-alexey.github.io/linear-regression/</id>
		<content type="html">&lt;p&gt;In this article we are going to use &lt;a href=&quot;&#x2F;ann-in-scala-2&quot;&gt;Scala mini-library&lt;&#x2F;a&gt; for Deep Learning
that we developed earlier in order to study basic linear regression task. 
We will learn model weights using perceptron model, which will be our single unit network layer that emits target value. 
This model will predict a target value &lt;code&gt;yHat&lt;&#x2F;code&gt; based on two trained parameters: weight and bias. Both are scalar numbers.
Weights optimization is going to be based on implemented Gradient descent algorithm:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;ann-in-scala-1&#x2F;#gradient-descent-optimization&quot;&gt;Gradient Descent Optimization&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;ann-in-scala-2&#x2F;#training-loop&quot;&gt;Training Loop&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Model equation:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; bias + weight * x
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h1 id=&quot;data-preparation&quot;&gt;Data Preparation&lt;&#x2F;h1&gt;
&lt;p&gt;Our goal is to show that perceptron model can learn the parameters, so that we can generate fake data using
uniformly distributed random generator:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; scala&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;util&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;Random

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val random = new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Random&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val weight =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; random&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;nextFloat()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val bias =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; random&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;nextFloat()

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;batch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(batchSize: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;): (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ArrayBuffer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Double&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ArrayBuffer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Double&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=
  val inputs = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ArrayBuffer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;empty[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Double&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val outputs = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ArrayBuffer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;empty[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Double&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;noise &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; random&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;nextDouble &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;5
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; until batchSize)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;foldLeft(inputs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; outputs) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;((x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;y)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;        
      val rnd =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; random&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;nextDouble
      x += rnd + noise
      y += bias + weight * rnd + noise
      (x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; y)
  }

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;xBatch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;yBatch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; batch(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;10000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val x = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor1D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(xBatch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;toArray)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val y = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor1D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(yBatch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;toArray)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;xTrain&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;xTest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;yTrain&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;yTest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; y)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;split(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We have just prepared two datasets: &lt;code&gt;8000&lt;&#x2F;code&gt; data samples for train and &lt;code&gt;2000&lt;&#x2F;code&gt; samples for test cycles.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;model-training&quot;&gt;Model Training&lt;&#x2F;h1&gt;
&lt;p&gt;First, we initialise sequential model for just one dense layer with single unit which is going to be a perceptron model.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val ann = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Sequential&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Double&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;SimpleGD&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](
  meanSquareError&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;  learningRate &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;00005&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,    
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;  batchSize &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;  gradientClipping &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; clipByValue(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;add(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Dense&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;())
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In order to avoid exploding gradient values, we also set &lt;strong&gt;grading clipping&lt;&#x2F;strong&gt; value, so that whenever our gradient is not
in &lt;code&gt;-5;5&lt;&#x2F;code&gt; numeric range it will be clipped to left or right boundary accordingly.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s start training and see if real weight and bias which we used to generate fake data are learnt by the 
perceptron:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val model =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; ann&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;train(xTrain&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; yTrain&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; epochs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;200&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)

println(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;current weight: ${model&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;weights}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
println(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;true weight: $weight&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
println(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;true bias: $bias&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Output:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 1&#x2F;200, avg. loss: 1.205505132675171
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 2&#x2F;200, avg. loss: 1.0070222616195679
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 3&#x2F;200, avg. loss: 0.737899661064148
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 4&#x2F;200, avg. loss: 0.46094685792922974
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 5&#x2F;200, avg. loss: 0.2417953610420227
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 6&#x2F;200, avg. loss: 0.10201635956764221
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 7&#x2F;200, avg. loss: 0.037492286413908005
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 8&#x2F;200, avg. loss: 0.014684454537928104
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 9&#x2F;200, avg. loss: 0.00778685137629509
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 10&#x2F;200, avg. loss: 0.005894653964787722
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;....
epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 190&#x2F;200, avg. loss: 0.005119443871080875
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 191&#x2F;200, avg. loss: 0.005119443871080875
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 192&#x2F;200, avg. loss: 0.005119443871080875
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 193&#x2F;200, avg. loss: 0.005119443405419588
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 194&#x2F;200, avg. loss: 0.005119443405419588
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 195&#x2F;200, avg. loss: 0.005119443405419588
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 196&#x2F;200, avg. loss: 0.005119443405419588
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 197&#x2F;200, avg. loss: 0.005119443405419588
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 198&#x2F;200, avg. loss: 0.005119443405419588
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 199&#x2F;200, avg. loss: 0.005119443405419588
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 200&#x2F;200, avg. loss: 0.005119443405419588
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I have cut the middle part of the output, but it is not hard to see the progress.&lt;&#x2F;p&gt;
&lt;p&gt;Latest model weights:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;weight&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; = sizes: 1x1, Tensor2D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;Double&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;[[0.690990393772042]]
,
bias&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; = sizes: 1, Tensor1D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;Double&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;[0.7804058255259821]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Original&#x2F;true weights we used for data generation:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; weight: 0.7220096
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; bias: 0.7346627
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Numers are quite close to true numbers, but not exactly the same. 
I have set small&#x2F;slow &lt;code&gt;learningRate&lt;&#x2F;code&gt; as &lt;code&gt;0.00005f&lt;&#x2F;code&gt; by intention, so that our learning metrics
will be smoother on the future plots. If we set &lt;code&gt;learningRate&lt;&#x2F;code&gt; to bigger value, it will be
closer to true weights. &lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;When I write &lt;code&gt;weights&lt;&#x2F;code&gt; I often mean &lt;code&gt;bias&lt;&#x2F;code&gt; and &lt;code&gt;weight&lt;&#x2F;code&gt; parameters in the same time.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;test-dataset&quot;&gt;Test dataset&lt;&#x2F;h1&gt;
&lt;p&gt;We have &lt;code&gt;2000&lt;&#x2F;code&gt; data samples for model testing, let&#x27;s what the error on predicting target values using unseen data:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val testPredicted =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; model&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;predict(xTest)  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val value =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; meanSquareError[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Double&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;apply(yTest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; testPredicted)
println(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;test meanSquareError = $value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Loss value on test is quite close to training loss, so the learnt model is fine and we can continue:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; meanSquareError = 0.005048050195478982
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h1 id=&quot;visualization&quot;&gt;Visualization&lt;&#x2F;h1&gt;
&lt;p&gt;To visualize the loss function, I have decied to try &lt;a href=&quot;https:&#x2F;&#x2F;acse-fk4517.github.io&#x2F;picta-docs&#x2F;index.html&quot;&gt;Picta&lt;&#x2F;a&gt; library.
It can be used in &lt;a href=&quot;https:&#x2F;&#x2F;jupyter.org&#x2F;&quot;&gt;Jupyter notebook&lt;&#x2F;a&gt; via &lt;a href=&quot;https:&#x2F;&#x2F;almond.sh&#x2F;&quot;&gt;Almond Scala kernel&lt;&#x2F;a&gt;, which is very cool.&lt;&#x2F;p&gt;
&lt;p&gt;Before we try to use Picta&#x27;s 2D or 3D &lt;a href=&quot;https:&#x2F;&#x2F;acse-fk4517.github.io&#x2F;picta-docs&#x2F;canvas.html&quot;&gt;Canvas API&lt;&#x2F;a&gt;, 
we need to prepare metrics data. &lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;We could run the entire training code in Jupyter together with Picta around, but as of now Almond Scala kernel
does not support Scala 3 which was used to write the Deep Learning code. So we will go with CSV files to 
bridge two worlds.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This is our plan:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Store metrics data from existing Scala 3 code to CSV files&lt;&#x2F;li&gt;
&lt;li&gt;Use CVS files in Jupyter with Scala 2.13&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;data-points-vs-model&quot;&gt;Data points vs. Model&lt;&#x2F;h2&gt;
&lt;p&gt;Saving data points and gradient history, i.e. weight and bias during the training:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val dataPoints =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; xBatch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;zip(yBatch)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;map((x, y) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;toString&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;toString))
store(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;metrics&#x2F;datapoints.csv&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;x,y&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; dataPoints&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;toList)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val gradientData =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; model&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;history&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;weights&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;zip(model&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;history&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;losses)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;map { (weights, l) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;      weights&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;headOption&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;map(w &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt; 
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;as1D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;toString&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;as1D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;toString)
      )&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;toList&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;flatten :+ l&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;toString
    }
store(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;metrics&#x2F;gradient.csv&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;w,b,loss&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; gradientData)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;store&lt;&#x2F;code&gt; function is just creating a CSV file out of data in the Scala list:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;store&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(filename: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;header: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;data: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=    
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Using&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;resource(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;PrintWriter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;File&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(filename))) { w &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;    w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;write(header)
    data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;foreach { row &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;      
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;      w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;write(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;${row&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;mkString(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)        
    }
  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let&#x27;s plot data points that we used to train the model as well the line that is based on learnt model parameters.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; org&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;carbonateresearch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;picta&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;._
import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; org&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;carbonateresearch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;picta&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;._

val filepath = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;$metricsDir&#x2F;datapoints.csv&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val data =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; readCSV(filepath)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val x =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; data(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;x&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;toDouble)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val y =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; data(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;y&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;toDouble)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val gradientData =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; readCSV(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;$metricsDir&#x2F;gradient.csv&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val w =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; gradientData(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;w&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;toDouble
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val b =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; gradientData(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;b&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;toDouble
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;model&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(x: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Double&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; w * x + b
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val m1 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val m2 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(model(m1(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; model(m1(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)))

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val inputData = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;XY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; y)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;asType(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;SCATTER&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;setName(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;Input Data&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;drawStyle(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;MARKERS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val modelData = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;XY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(m1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;toList&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; m2)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;asType(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;SCATTER&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;setName(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;Model&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val chart = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Chart&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;addSeries(inputData&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; modelData)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;setTitle(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;Data points vs. Trained model&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)

chart&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;plotInline
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;novakov-alexey.github.io&amp;#x2F;processed_images&amp;#x2F;2d6874260820fd6100.png&quot; class=&quot;center-image&quot;&#x2F;&gt;
&lt;br&#x2F;&gt;&lt;br&#x2F;&gt;
&lt;p&gt;Our model crosses the data points almost in the middle as expected.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;loss-metric-per-epoch&quot;&gt;Loss metric per epoch&lt;&#x2F;h2&gt;
&lt;p&gt;Creating a CSV file that contains loss value per training epoch.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val lossData =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; model&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;losses&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;zipWithIndex&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;map((l,i) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;toString&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; l&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;toString))
store(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;metrics&#x2F;lr.csv&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;epoch,loss&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; lossData)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-csv&quot; data-lang=&quot;csv&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;epoch,loss
0,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1.205505132675171
1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1.0070222616195679
2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0.737899661064148
3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0.46094685792922974
4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0.2417953610420227
...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val metricsDir =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; getWorkingDirectory + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&#x2F;..&#x2F;metrics&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val data =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; readCSV(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;$metricsDir&#x2F;lr.csv&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val epochs =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; data(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;epoch&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;toInt)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val losses =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; data(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;loss&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;toDouble)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val series = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;XY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(epochs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; losses)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;asType(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;SCATTER&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;drawStyle(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;LINES&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val chart = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Chart&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;()
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;addSeries(series&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;setName(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;Learning loss&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;))
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;setTitle(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;Linear Regression Example: Loss vs. Epoch&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
chart&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;plotInline
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;novakov-alexey.github.io&amp;#x2F;processed_images&amp;#x2F;46ca27b492cb9ae600.png&quot; class=&quot;center-image&quot;&#x2F;&gt;
&lt;br&#x2F;&gt;&lt;br&#x2F;&gt;
&lt;h2 id=&quot;loss-function-surface-gradient-history&quot;&gt;Loss Function Surface &amp;amp; Gradient History&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;Picta&lt;&#x2F;code&gt; can also draw 3D plots, so that we can generate loss surface based on weight and bias parameters (&lt;code&gt;x&lt;&#x2F;code&gt; and &lt;code&gt;y&lt;&#x2F;code&gt; axis) and loss value as &lt;code&gt;z&lt;&#x2F;code&gt; axis.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val weights = for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; until &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;yield&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; i&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;d
val biases =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; weights &lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; we use the same range for bias
  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val losses =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; weights&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;par&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;map { w &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;
  val wT =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;as2D
  biases&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;foldLeft(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ArrayBuffer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;empty[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Double&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]) { (acc, b) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;
    val loss =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; ann&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;loss(x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Weight&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(wT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;as1D)))  
    acc :+ loss
  }
}
 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val metricsData =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; weights&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;zip(biases)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;zip(losses)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;map { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;((w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;b)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;l) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;toString&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;toString&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; l&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;mkString(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)) 
  }
  
store(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;metrics&#x2F;lr-surface.csv&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;w,b,l&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; metricsData&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;toList)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-csv&quot; data-lang=&quot;csv&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;w,b,l
0.0,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1.4736275893057016&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;... &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&#x2F;&#x2F; here come &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;100 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;values for column `l` which stands for loss.
...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Last column is going to be used in 3D plot as &lt;code&gt;Z&lt;&#x2F;code&gt; axis. It is a list rather than a scalar value. This way we can draw
a surface in Picta later.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val data =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; readCSV(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;$metricsDir&#x2F;lr-surface.csv&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val w =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; data(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;w&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;toDouble)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;reverse
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val b =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; data(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;b&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;toDouble)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;reverse
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val loss =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; data(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;l&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;split(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;toDouble))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;reverse
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val surface = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;XYZ&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; z&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;loss&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;flatten&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;loss(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;length)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;asType(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;SURFACE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;setName(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;Loss&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val gradientData =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; readCSV(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;$metricsDir&#x2F;gradient.csv&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val gw =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; gradientData(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;w&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;toDouble)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;reverse
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val gb =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; gradientData(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;b&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;toDouble)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;reverse
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val gLoss =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; gradientData(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;loss&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;toDouble)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;reverse
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val gradient = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;XYZ&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;gw&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;gb&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; z&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;gLoss)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;asType(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;SCATTER3D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;setName(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;Gradient&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;drawLinesMarkers

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val surfaceChart = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Chart&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;()
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;addSeries(gradient&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; surface)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;setTitle(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;Loss Function Surface&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;addAxes(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Axis&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; title &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;w&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Axis&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; title &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;b&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Axis&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Z&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; title &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;loss&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;))
surfaceChart&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;plotInline
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Second plot &lt;code&gt;gradient&lt;&#x2F;code&gt; is for gradient history.&lt;&#x2F;p&gt;
&lt;p&gt;I have created several print-screens just to show you this beatiful surface from different angles:&lt;&#x2F;p&gt;
&lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;novakov-alexey.github.io&amp;#x2F;processed_images&amp;#x2F;e4a4f63338f773f900.png&quot; class=&quot;center-image&quot;&#x2F;&gt;
&lt;br&#x2F;&gt;&lt;br&#x2F;&gt;
&lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;novakov-alexey.github.io&amp;#x2F;processed_images&amp;#x2F;0958828b7d7e5a0900.png&quot; class=&quot;center-image&quot;&#x2F;&gt;
&lt;br&#x2F;&gt;&lt;br&#x2F;&gt;
&lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;novakov-alexey.github.io&amp;#x2F;processed_images&amp;#x2F;30133b0c6ac7679100.png&quot; class=&quot;center-image&quot;&#x2F;&gt;
&lt;br&#x2F;&gt;&lt;br&#x2F;&gt;
&lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;novakov-alexey.github.io&amp;#x2F;processed_images&amp;#x2F;3516adf8bb1045d000.png&quot; class=&quot;center-image&quot;&#x2F;&gt;
&lt;br&#x2F;&gt;&lt;br&#x2F;&gt;
&lt;p&gt;Dotted line is gradient descent trace: &lt;code&gt;z&lt;&#x2F;code&gt; axis is loss value which is moving to the local minimum with every epoch.
It is moving according to its &lt;code&gt;w&lt;&#x2F;code&gt; and &lt;code&gt;b&lt;&#x2F;code&gt;, which are plotted on &lt;code&gt;x&lt;&#x2F;code&gt; and &lt;code&gt;y&lt;&#x2F;code&gt; axis accordingly.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;contour-chart&quot;&gt;Contour Chart&lt;&#x2F;h3&gt;
&lt;p&gt;One more fancy chart from &lt;code&gt;Picta&lt;&#x2F;code&gt; is contour chart, which sometimes can be useful for analysis.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val contour = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;XYZ&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; z&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;loss&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;flatten&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;loss(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;length)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;asType(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;CONTOUR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val contourChart = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Chart&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;addSeries(contour)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;setTitle(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;Loss Contour&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;addAxes(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Axis&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; title &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;w&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Axis&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; title &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;b&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Axis&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Z&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; title &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;loss&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;))

contourChart&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;plotInline
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;novakov-alexey.github.io&amp;#x2F;processed_images&amp;#x2F;43be0d1eedc792b300.png&quot; class=&quot;center-image&quot;&#x2F;&gt;
&lt;br&#x2F;&gt;&lt;br&#x2F;&gt;
&lt;p&gt;Just for you to prove that this was drawn in Jupyter actually :-)&lt;&#x2F;p&gt;
&lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;novakov-alexey.github.io&amp;#x2F;processed_images&amp;#x2F;9f7921cf044ba93e00.png&quot; class=&quot;center-image&quot;&#x2F;&gt;
&lt;br&#x2F;&gt;&lt;br&#x2F;&gt;
&lt;p&gt;Again big thanks to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;almond-sh&#x2F;almond&quot;&gt;Almond project&lt;&#x2F;a&gt; that made Scala easily runnable in Jupyter.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;summary&quot;&gt;Summary&lt;&#x2F;h1&gt;
&lt;p&gt;We have seen that our perceptron model is able to learn weights very quick for simple 1 input variable.
So it proves that gradient descent algorithm implemented earlier is working fine.&lt;&#x2F;p&gt;
&lt;p&gt;Also, we could visualise loss metrics using Picta and Almond Jupyter kernel for Scala quite easily. 
Such visualisation can help us to tune model training in real life use cases.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>TensorFlow Scala - Linear Regression via ANN</title>
		<published>2021-02-13T00:00:00+00:00</published>
		<updated>2021-02-13T00:00:00+00:00</updated>
		<link href="https://novakov-alexey.github.io/tensorflow-scala/" type="text/html"/>
		<id>https://novakov-alexey.github.io/tensorflow-scala/</id>
		<content type="html">&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;eaplatanios&#x2F;tensorflow_scala&#x2F;master&#x2F;docs&#x2F;images&#x2F;logo.svg?sanitize=true&quot; alt=&quot;TensorFlow Scala logo&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;eaplatanios&#x2F;tensorflow_scala&quot;&gt;TensorFlow Scala&lt;&#x2F;a&gt; is a strongly-typed Scala API for TensorFlow core C++ library developed by &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;eaplatanios&quot;&gt;Anthony Platanios&lt;&#x2F;a&gt;. This library
integrates with native TensorFlow library via &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Java_Native_Interface&quot;&gt;JNI&lt;&#x2F;a&gt;, so no intermediate official&#x2F;non-official Java libraries are used.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;In this article we will implement &amp;quot;multiple linear
regression&amp;quot; from the &lt;a href=&quot;ann-in-scala-2&#x2F;&quot;&gt;previous article&lt;&#x2F;a&gt; about Customer Churn using TensorFlow.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;setup-project&quot;&gt;Setup Project&lt;&#x2F;h1&gt;
&lt;p&gt;I am going to use SBT, but you can also use any other Scala-aware build tool.&lt;&#x2F;p&gt;
&lt;p&gt;New SBT project configuration:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;lazy val tensorFlowScalaVer = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;0.5.10&amp;quot; 

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;lazy val root = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(project in file(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;.&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;))
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;settings(
    name := &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;tensorflow-scala-example&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;    libraryDependencies ++= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Seq&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;org.platanios&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; %% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;tensorflow-data&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; % tensorFlowScalaVer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;org.platanios&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; %% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;tensorflow&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; % tensorFlowScalaVer classifier &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;darwin&amp;quot;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
  )
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In order to add &lt;code&gt;TensorFlow Scala&lt;&#x2F;code&gt; to existing project, just add two library dependencies from above configuration. &lt;code&gt;tensorflow-data&lt;&#x2F;code&gt; module is optional, but we are going to use it
in this article as well.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Important:&lt;&#x2F;strong&gt; I am using OSX, so my classifier is &lt;code&gt;darwin&lt;&#x2F;code&gt;. In case you use Linux or Windows, please &lt;strong&gt;change classifier&lt;&#x2F;strong&gt; value to currently available classifiers for those platforms, check it here to be sure: &lt;a href=&quot;https:&#x2F;&#x2F;repo1.maven.org&#x2F;maven2&#x2F;org&#x2F;platanios&#x2F;tensorflow_2.13&#x2F;0.5.10&#x2F;&quot;&gt;https:&#x2F;&#x2F;repo1.maven.org&#x2F;maven2&#x2F;org&#x2F;platanios&#x2F;tensorflow_2.13&#x2F;0.5.10&#x2F;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;tensor-api&quot;&gt;Tensor API&lt;&#x2F;h1&gt;
&lt;p&gt;Before start implementing an Artificial Neural Network with TensorFlow, let&#x27;s
briefly look at how we can load data into a tensor. &lt;&#x2F;p&gt;
&lt;p&gt;We would need to create matrices, so we can use Scala collections and map
Arrays to Tensors and put them as rows into another Tensor. For example:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; org&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;platanios&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;tensorflow&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;api&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;._

val t1 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;))
println(t1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;summarize())
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;will print:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;Tensor[Int, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;2, 3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;[[1,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 4, 0],
 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;[2,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 3, 5]]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h1 id=&quot;data-preparation&quot;&gt;Data Preparation&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;code&gt;TensorFlow Scala&lt;&#x2F;code&gt; also has data API to load datasets. We will use that API 
partly. Unfortunately, current documentation does not give an idea how to use Data API, so that we will use partly. Most of data preparation code I took from previous article.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;custom-code&quot;&gt;Custom Code&lt;&#x2F;h2&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;type Matrix&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]]

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;private def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;createEncoders&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Numeric&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ClassTag&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](data: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Matrix&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;])
  : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Matrix&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Matrix&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;{

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val encoder = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;LabelEncoder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;fit[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;TextLoader&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;column(data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;))
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val hotEncoder = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;OneHotEncoder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;fit[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;TextLoader&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;column(data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;))

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val label = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; encoder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;transform(t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val hot = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; hotEncoder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;transform(t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val typeTransform = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(t: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Matrix&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; transform[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](t)

  label andThen hot andThen typeTransform
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;loadData&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;{
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; loading data from CSV file into memory 
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val loader = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;TextLoader&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;of(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;data&#x2F;Churn_Modelling.csv&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;load()
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val data =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; loader&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;cols[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val encoders =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; createEncoders[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](data)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val numericData =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; encoders(data)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val scaler = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;StandardScaler&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;fit(numericData)

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; create data transformation as custom code
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val prepareData = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(t: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Matrix&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val numericData =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; encoders(t)
    scaler&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;transform(numericData)
  }

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; transform features
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val xMatrix =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; prepareData(data)    
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val yVector =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; loader&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;col[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)

&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;tensor-api-1&quot;&gt;Tensor API&lt;&#x2F;h2&gt;
&lt;p&gt;Continuation of &lt;code&gt;loadData&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; org&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;platanios&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;tensorflow&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;utilities&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;UniformSplit
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; Wrap arrays into Tensors and set Shapes
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val xData =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; xMatrix&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;map(a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;toSeq))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;toSeq
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val x = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(xData)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;reshape(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Shape&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; features))
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val y = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(yVector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;toSeq)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;reshape(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Shape&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; targets))

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; use library API to split data for train and test sets
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val split = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;UniformSplit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;shape(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;trainIndices&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;testIndices&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; split(trainPortion &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val xTrain =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;gather[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](trainIndices&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; axis &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val yTrain =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;gather[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](trainIndices&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; axis &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val xTest =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;gather[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](testIndices&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; axis &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val yTest =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;gather[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](testIndices&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; axis &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
  (xTrain&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; yTrain&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; xTest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; yTest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; prepareData)
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As per comments above, we prepare training and test data and return it as 4
different Tensor objects. Also, we return a function as fifth element of the tuple
for one more application (read further).&lt;&#x2F;p&gt;
&lt;p&gt;Full code of data preparation that includes:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;selecting specific CSV file columns&lt;&#x2F;li&gt;
&lt;li&gt;normalising numeric columns&lt;&#x2F;li&gt;
&lt;li&gt;encoding categorical columns as one-hot &lt;&#x2F;li&gt;
&lt;li&gt;encoding label-like columns&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;see here:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;novakov-alexey&#x2F;tensorflow-scala-example&#x2F;blob&#x2F;main&#x2F;src&#x2F;main&#x2F;scala&#x2F;tensorflow&#x2F;tutorial&#x2F;encoders.scala&quot;&gt;encoders&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;novakov-alexey&#x2F;tensorflow-scala-example&#x2F;blob&#x2F;main&#x2F;src&#x2F;main&#x2F;scala&#x2F;tensorflow&#x2F;tutorial&#x2F;TextLoader.scala&quot;&gt;TextLoader&lt;&#x2F;a&gt; &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;model-assembly&quot;&gt;Model Assembly&lt;&#x2F;h1&gt;
&lt;p&gt;We are going to learn on 12 features to predict one target.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val features = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;12
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val targets = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val batchSize = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;100

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val input =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; tf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;learn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Input&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;FLOAT32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Shape&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; features))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val trainInput =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; tf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;learn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Input&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;FLOAT32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Shape&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; targets))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;batchSize&lt;&#x2F;code&gt; will be used in a couple of places of TensorFlow API.&lt;&#x2F;p&gt;
&lt;p&gt;In order to construct all 12 x 6 x 6 x 1 network below:&lt;&#x2F;p&gt;
&lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;novakov-alexey.github.io&amp;#x2F;processed_images&amp;#x2F;71264b2ba4b8086f00.png&quot; class=&quot;center-image&quot;&#x2F;&gt;
&lt;br&#x2F;&gt;&lt;br&#x2F;&gt;
&lt;p&gt;we use the following API:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val layer =
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;  tf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;learn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Linear&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;Layer_0&#x2F;Linear&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;) &amp;gt;&amp;gt;
    tf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;learn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ReLU&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;Layer_0&#x2F;ReLU&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;) &amp;gt;&amp;gt;
    tf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;learn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Linear&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;Layer_1&#x2F;Linear&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;) &amp;gt;&amp;gt;
    tf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;learn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ReLU&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;Layer_1&#x2F;ReLU&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;) &amp;gt;&amp;gt;
    tf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;learn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Linear&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;OutputLayer&#x2F;Linear&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;) &amp;gt;&amp;gt;
    tf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;learn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Sigmoid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;OutputLayer&#x2F;Sigmoid&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;layer&lt;&#x2F;code&gt; state is a composition of fully-connected layers with its own activation function. We specify &lt;code&gt;String&lt;&#x2F;code&gt; name for each layer that will be eventually used in TensorFlow graph.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val loss =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; tf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;learn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;L2Loss&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;Loss&#x2F;L2Loss&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)    
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val optimizer =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; tf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;train&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Adam&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We are going to use &lt;code&gt;L2&lt;&#x2F;code&gt;, which is a &lt;code&gt;half least square error&lt;&#x2F;code&gt; as a loss function.
And Adaptive Moment Estimation (Adam) as weights optimization algorithm.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, we pass above values to construct simple supervised model. &lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val model =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; tf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;learn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Model&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;simpleSupervised(
  input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; input&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;  trainInput &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; trainInput&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;  layer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; layer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;  loss &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; loss&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;  optimizer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; optimizer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;  clipGradients &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ClipGradientsByGlobalNorm&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can also create unsupervised model with &lt;code&gt;.unsupervised&lt;&#x2F;code&gt; method, if needed.&lt;&#x2F;p&gt;
&lt;p&gt;As we can see, model construction is highly declarative as the entire &lt;code&gt;TensorFlow Scala&lt;&#x2F;code&gt; library API.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;estimator&quot;&gt;Estimator&lt;&#x2F;h1&gt;
&lt;p&gt;Another abstraction in TensorFlow we are going to use is &lt;a href=&quot;https:&#x2F;&#x2F;www.tensorflow.org&#x2F;guide&#x2F;estimator&quot;&gt;Estimator&lt;&#x2F;a&gt;. It is used to train, predict, evaluate and export for serving the TensorFlow models. In some other libraries, an estimator is usually a model abstraction itself. Estimator provides nice separation from the input data and actual model to train.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dataset&quot;&gt;Dataset&lt;&#x2F;h2&gt;
&lt;p&gt;Before we construct an estimator we need to wrap the input data into a Dataset. As I mentioned before, the &lt;code&gt;TensorFlow Scala&lt;&#x2F;code&gt; provides a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;eaplatanios&#x2F;tensorflow_scala&#x2F;tree&#x2F;master&#x2F;modules&#x2F;api&#x2F;src&#x2F;main&#x2F;scala&#x2F;org&#x2F;platanios&#x2F;tensorflow&#x2F;api&#x2F;ops&#x2F;data&quot;&gt;data package&lt;&#x2F;a&gt; to 
load some data formats in streaming way &#x2F; lazily. This is recommended way to use this library that allows us to iterate over the data in streaming fashion, so the full dataset does not need to fit into memory. However, our current example dataset is quite small. so that we used custom code to load and transform the data before we start any learning. Now we have to wrap Tensors into Datasets:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;xTrain&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;yTrain&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;xTest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;yTest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;dataTransformer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; loadData()

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val trainFeatures =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; tf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;datasetFromTensorSlices(xTrain)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val trainLabels =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; tf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;datasetFromTensorSlices(yTrain)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val testFeatures =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; tf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;datasetFromTensorSlices(xTest)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val testLabels =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; tf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;datasetFromTensorSlices(yTest)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val trainData =
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;  trainFeatures
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;zip(trainLabels)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;repeat()
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;shuffle(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;batch(batchSize)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;prefetch(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val evalTrainData =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; trainFeatures&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;zip(trainLabels)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;batch(batchSize)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;prefetch(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val evalTestData =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; testFeatures&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;zip(testLabels)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;batch(batchSize)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;prefetch(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;output&quot;&gt;Output&lt;&#x2F;h2&gt;
&lt;p&gt;Above code creates training dataset as combination of features and labels &lt;code&gt;outputs&lt;&#x2F;code&gt;.
Core TensorFlow library has an idea of &lt;a href=&quot;https:&#x2F;&#x2F;www.tensorflow.org&#x2F;api_docs&#x2F;cc&#x2F;class&#x2F;tensorflow&#x2F;output&quot;&gt;Output abstraction&lt;&#x2F;a&gt;. The &lt;code&gt;Output&lt;&#x2F;code&gt; is a symbolic handle that represents a tensor value produced by an &lt;code&gt;Operation&lt;&#x2F;code&gt;. In other words, it is future state of a Tensor once particular operand is applied to that tensor. It does not hold the values of that operation
output, but instead provides a means of computing those values in a TensorFlow &lt;code&gt;Session&lt;&#x2F;code&gt;, which is another TensorFlow abstraction. The session is created automatically by the Estimator. One can also construct TensorFlow session manually, we are not going to do this in this article.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;training-metrics&quot;&gt;Training Metrics&lt;&#x2F;h2&gt;
&lt;p&gt;One of the place where we work with &lt;code&gt;Output&lt;&#x2F;code&gt;s directly in this example, is 
training metric configuration. For binary classification we need to transform predicted
values by the model to &lt;code&gt;0&lt;&#x2F;code&gt; and &lt;code&gt;1&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val accMetric =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; tf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;metrics&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;MapMetric&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(
  (v: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Output&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Output&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Output&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]))) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;predicted&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;actual&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; v
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val positives =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; predicted &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;f
    val shape = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Shape&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(batchSize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; positives&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;shape(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;))
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val binary =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; tf
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;select(
        positives&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;        tf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;fill(shape)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;        tf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;fill(shape)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
      )
    (binary&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; actual)
  }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;  tf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;metrics&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Accuracy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;Accuracy&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I think to transform predicted values to binary values, i.e. &lt;code&gt;1&lt;&#x2F;code&gt; and &lt;code&gt;0&lt;&#x2F;code&gt; can be done more efficient than filling &lt;code&gt;true&lt;&#x2F;code&gt; boolean values with &lt;code&gt;1&lt;&#x2F;code&gt; and &lt;code&gt;false&lt;&#x2F;code&gt; values with &lt;code&gt;0&lt;&#x2F;code&gt; using &lt;code&gt;tf.select&lt;&#x2F;code&gt; function, but I could not find another way.&lt;&#x2F;p&gt;
&lt;p&gt;We will use above accuracy metric in &lt;code&gt;estimator&lt;&#x2F;code&gt; construction.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;construct-estimator&quot;&gt;Construct Estimator&lt;&#x2F;h2&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val summariesDir = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Paths&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;get(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;temp&#x2F;ann&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val estimator =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; tf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;learn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;InMemoryEstimator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(
  model&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;  tf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;learn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Configuration&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(summariesDir))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;  tf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;learn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;StopCriteria&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(maxSteps &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;100000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(
    tf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;learn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;LossLogger&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(trigger &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; tf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;learn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;StepHookTrigger&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;    tf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;learn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Evaluator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(
      summaryDir &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; summariesDir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;      log &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;      datasets &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Seq&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;Train&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; evalTrainData)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;Test&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; evalTestData))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;      metrics &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Seq&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(accMetric)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;      trigger &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; tf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;learn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;StepHookTrigger&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;      name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;Evaluator&amp;quot;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;    tf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;learn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;StepRateLogger&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(
      log &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;      summaryDir &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; summariesDir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;      trigger &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; tf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;learn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;StepHookTrigger&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
    )&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;    tf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;learn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;SummarySaver&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(summariesDir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; tf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;learn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;StepHookTrigger&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;    tf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;learn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;CheckpointSaver&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(summariesDir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; tf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;learn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;StepHookTrigger&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;))
  )&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;  tensorBoardConfig &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;    tf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;learn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;TensorBoardConfig&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(summariesDir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; reloadInterval &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Above code configures:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Logging in training loop:
&lt;ul&gt;
&lt;li&gt;log to summary directory &amp;quot;temp&#x2F;ann&amp;quot;&lt;&#x2F;li&gt;
&lt;li&gt;store checkpoint at every 1000 step to summary directory&lt;&#x2F;li&gt;
&lt;li&gt;log at every 100 steps&lt;&#x2F;li&gt;
&lt;li&gt;log loss value at every 100 steps&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Evaluate metrics:
&lt;ul&gt;
&lt;li&gt;calculate accuracy metric (and any other specified metrics in Seq) at every 1000 step&lt;&#x2F;li&gt;
&lt;li&gt;use data specified in Evaluator datasets&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Take data for Tensorboard from summary directory&lt;&#x2F;li&gt;
&lt;li&gt;Stop after &lt;code&gt;100 000&lt;&#x2F;code&gt; step unless overridden by &lt;code&gt;.train&lt;&#x2F;code&gt; method&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;&#x2F;strong&gt; estimator works with &lt;code&gt;step&lt;&#x2F;code&gt; notion rather than with &lt;code&gt;epoch&lt;&#x2F;code&gt;. In order to calculate number of desired training steps, you can divide a &lt;em&gt;number training records&lt;&#x2F;em&gt; on &lt;em&gt;batch size&lt;&#x2F;em&gt;. In our case we have 8000 training records &#x2F; 100 batch size = 80 steps. This is one epoch, i.e. one full training cycle on available dataset. In order to repeat training on the same model parameters 100 times, i.e. 100 epochs instead of 1 epoch we need 80 * 100 = 8000 steps. So if we set &lt;code&gt;10 000&lt;&#x2F;code&gt; steps we ask for 125 epochs since 2000 steps is 25 epochs. &lt;&#x2F;p&gt;
&lt;h1 id=&quot;training&quot;&gt;Training&lt;&#x2F;h1&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;estimator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;train(
  () &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; trainData&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;  tf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;learn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;StopCriteria&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(maxSteps &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;10000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;))
)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Finally we are starting the training loop. We pass the same &lt;code&gt;trainData&lt;&#x2F;code&gt; as we used
for metric evaluation. However, we could use different datasets for training and metric evaluations. We override &lt;code&gt;maxSteps&lt;&#x2F;code&gt; with &lt;code&gt;10 000&lt;&#x2F;code&gt;. As we have only 10k rows in CSV file, we do not need initial &lt;code&gt;100 000&lt;&#x2F;code&gt; steps for training. TensorFlow&lt;&#x2F;p&gt;
&lt;p&gt;Once we run &lt;code&gt;train&lt;&#x2F;code&gt; method, we can see the following output in console:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;.....
2021-02-12&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 19:07:15.308 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; INFO  Learn &#x2F; Hooks &#x2F; Evaluation - Step 10000 Evaluator:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;2021-02-12&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 19:07:15.308 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; INFO  Learn &#x2F; Hooks &#x2F; Evaluation - ╔═══════╤════════════╗
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;2021-02-12&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 19:07:15.308 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; INFO  Learn &#x2F; Hooks &#x2F; Evaluation - ║       │   Accuracy ║
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;2021-02-12&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 19:07:15.308 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; INFO  Learn &#x2F; Hooks &#x2F; Evaluation - ╟───────┼────────────╢
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;2021-02-12&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 19:07:15.369 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; INFO  Learn &#x2F; Hooks &#x2F; Evaluation - ║ Train │     0,8494 ║
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;2021-02-12&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 19:07:15.386 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; INFO  Learn &#x2F; Hooks &#x2F; Evaluation - ║  Test │     0,8367 ║
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;2021-02-12&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 19:07:15.391 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; INFO  Learn &#x2F; Hooks &#x2F; Evaluation - ╚═══════╧════════════╝
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;there will be &lt;code&gt;11&lt;&#x2F;code&gt; logging statements for intermediate accuracy value, so I copied only the last summary.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;train&lt;&#x2F;code&gt; method returns &lt;code&gt;Unit&lt;&#x2F;code&gt;, so it mutates state of the estimator, so that you can use
it further for model inference.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;single-test&quot;&gt;Single test&lt;&#x2F;h2&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val example = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;TextLoader&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;n&#x2F;a,n&#x2F;a,n&#x2F;a,600,France,Male,40,3,60000,2,1,1,50000,n&#x2F;a&amp;quot;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;cols[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val testExample = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(dataTransformer(example)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;toSeq)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;reshape(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Shape&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; features))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val prediction =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; estimator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;infer(() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; testExample)

println(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;Customer exited ? ${prediction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;scalar &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We use &lt;code&gt;dataTransformer&lt;&#x2F;code&gt; function one more time for converting raw single data record into
numeric format that our model can understand and return a target value for it:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;Customer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; exited &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; false
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;false&lt;&#x2F;code&gt; is expected value for that simple example.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;batch-test&quot;&gt;Batch test&lt;&#x2F;h2&gt;
&lt;p&gt;We can also submit data batch to infer a target value for each record.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;println(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;Train accuracy = ${accuracy(xTrain&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; yTrain)}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
println(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;Test accuracy = ${accuracy(xTest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; yTest)}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We are going to calculate the accuracy metric manually based on known labels for train and test datasets:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;accuracy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(input: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;labels: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Float = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;{    
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val predictions =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; estimator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;infer(() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; input&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;toFloat)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;toArray
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val correct =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; predictions
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;map(v &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt; if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(v &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;f else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;zip(labels&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;toFloat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;toArray)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;foldLeft(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(acc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(yHat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;y)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt; if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(yHat &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; y) acc + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; acc }
  correct &#x2F; predictions&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;length
}  
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;Train&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; accuracy = 0.867875
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;Test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; accuracy = 0.8605
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Although we used again the same data for checking accuracy, however one can take new &#x2F; unseen
data to check the accuracy on just trained or loaded from checkpoint estimator.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;tensorboard&quot;&gt;Tensorboard&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.tensorflow.org&#x2F;tensorboard&quot;&gt;Tensorboard&lt;&#x2F;a&gt; is an additional tool from TensorFlow main framework. It can be installed via &lt;code&gt;pip&lt;&#x2F;code&gt; tool:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;pip&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; install tensorboard
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We enable Tensorboard as part of Estimator configuration. Every time we run &lt;code&gt;training&lt;&#x2F;code&gt; cycle for an estimator with Tensorboard configured, we get the following console message:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;sbt:tensorflow-scala-example&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; run
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;[info]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; running MultipleLR
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;2021-02-12&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 21:09:04.933 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; INFO  Learn &#x2F; Hooks &#x2F; TensorBoard - Launching TensorBoard in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;#39;localhost:6006&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; for log directory &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;#39;....&#x2F;tensorflow-ann&#x2F;temp&#x2F;ann&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;TensorFlow starts a web-app at &lt;code&gt;localhost&lt;&#x2F;code&gt; on port &lt;code&gt;6006&lt;&#x2F;code&gt; and using data from the the log directory that we configured at &lt;code&gt;estimator&lt;&#x2F;code&gt; level.&lt;&#x2F;p&gt;
&lt;p&gt;Log directory accumulates TensorFlow logs between training cycles, so that if we run training
cycle again and again we can see that estimator variables (graph state) is restored from that
logging folder. Eventually, our model loss and accuracy metric values are going to be stable, i.e. not improving anymore.&lt;&#x2F;p&gt;
&lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;novakov-alexey.github.io&amp;#x2F;processed_images&amp;#x2F;1f3be4d78bdf066100.png&quot; class=&quot;center-image&quot;&#x2F;&gt;
&lt;br&#x2F;&gt;&lt;br&#x2F;&gt;
&lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;novakov-alexey.github.io&amp;#x2F;processed_images&amp;#x2F;aaa618562eef863c00.png&quot; class=&quot;center-image&quot;&#x2F;&gt;
&lt;br&#x2F;&gt;&lt;br&#x2F;&gt;
&lt;h1 id=&quot;summary&quot;&gt;Summary&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;code&gt;TensorFlow Scala&lt;&#x2F;code&gt; is a fantastic library that mimics most of &lt;code&gt;TensorFlow&lt;&#x2F;code&gt; core library and Python API.
Although current library is missing some documentations, one can always use official TensorFlow documentation web-site to get an idea of the Scala API.&lt;&#x2F;p&gt;
&lt;p&gt;Implemented ANN in &lt;code&gt;TensorFlow Scala&lt;&#x2F;code&gt; shows that one can use Scala to train Deep Learning models easily. Training program in Scala are going to be quite declarative and statically type-checked which eliminates lots of mistakes. Library API also allows to extend most of the abstractions, which is very important for real life use cases.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;source-code&quot;&gt;Source Code&lt;&#x2F;h1&gt;
&lt;p&gt;Full source code as SBT project can be found here: &lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;novakov-alexey&#x2F;tensorflow-scala-example&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;novakov-alexey&#x2F;tensorflow-scala-example&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Artificial Neural Network in Scala - part 2</title>
		<published>2021-02-05T00:00:00+00:00</published>
		<updated>2021-02-05T00:00:00+00:00</updated>
		<link href="https://novakov-alexey.github.io/ann-in-scala-2/" type="text/html"/>
		<id>https://novakov-alexey.github.io/ann-in-scala-2/</id>
		<content type="html">&lt;p&gt;In this article we are going to implement ANN from scratch in Scala. It is continuation of &lt;a href=&quot;..&#x2F;ann-in-scala-1&quot;&gt;the first article&lt;&#x2F;a&gt;, which describes 
a theory of ANN.&lt;&#x2F;p&gt;
&lt;p&gt;This implementation will consist of:&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;ol&gt;
&lt;li&gt;Mini-library for sub-set of Tensor calculus&lt;&#x2F;li&gt;
&lt;li&gt;Mini-library for data preparation&lt;&#x2F;li&gt;
&lt;li&gt;A DSL for Neural Network creation, including layers&lt;&#x2F;li&gt;
&lt;li&gt;Pluggable weights optimizer&lt;&#x2F;li&gt;
&lt;li&gt;Pluggable implementation of activation and loss functions&lt;&#x2F;li&gt;
&lt;li&gt;Pluggable training metric calculation&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Everything will be implemented in pure Scala without using any third-party code. 
By pluggable I mean extendable, i.e. a user can provide own implementation by implementing Scala trait.&lt;&#x2F;p&gt;
&lt;p&gt;Neural network and data preprocessing APIs are inspired by &lt;a href=&quot;https:&#x2F;&#x2F;keras.io&#x2F;&quot;&gt;Keras&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;scikit-learn.org&#x2F;stable&#x2F;&quot;&gt;scikit-learn&lt;&#x2F;a&gt; libraries.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;tensor-library&quot;&gt;Tensor Library&lt;&#x2F;h1&gt;
&lt;p&gt;Before starting our journey into the world of linear algebra we need good support for Tensor calculus such as
multiplication, addition, subtraction, transponding operations. Without these operations, we will clutter the
main algorithm so that another person, who will be reading our code, may lost. It is very easy to be blown
away by pile of code which is trying to mimic math. Scala is perfect language to implement math expression as
it supports custom operands by using symbols as definitions (variables, methods, etc.), i.e. we can implement &amp;quot;*&amp;quot; or any other math operations as part of our custom type &lt;code&gt;Tensor&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Below we define &lt;code&gt;Tensor&lt;&#x2F;code&gt; trait for a generic type &lt;code&gt;T&lt;&#x2F;code&gt;. Later, we will set boundaries for T. It must have &lt;code&gt;given&lt;&#x2F;code&gt; 
instances of ClassTag and Numeric types for array creation and general numerical computations.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;sealed trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt; Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]:
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;A
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;A
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int
  def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;sizes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;cols&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int
  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;extension [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ClassTag&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Numeric&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;U&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ClassTag&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](t: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;])
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; dot product    
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(that: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;mul(t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; that)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(f: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;U&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;U&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;map[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;U&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; f)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(that: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;subtract(t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor0D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(that))
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(that: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;subtract(t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; that)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(that: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;plus(t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; that)    
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;sum(t)        
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(fraction: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;): (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= 
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;split(fraction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; t)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; Hadamard product
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;multiply&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(that: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;multiply(t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; that)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;batches&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(
        batchSize: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Iterator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]]] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;batches(t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; batchSize)    
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In extension section we add lots of operations that our generic Tensor is going to support. Some of them are symbolic like
&lt;code&gt;*&lt;&#x2F;code&gt; and &lt;code&gt;-&lt;&#x2F;code&gt;. Other operations are more traditional methods such as &lt;code&gt;map&lt;&#x2F;code&gt; or &lt;code&gt;sum&lt;&#x2F;code&gt;. 
Note that &lt;code&gt;*&lt;&#x2F;code&gt; and &lt;code&gt;multiply&lt;&#x2F;code&gt; are two different operations. From math perspective, the first one is a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Dot_product&quot;&gt;dot product&lt;&#x2F;a&gt;
another one is a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Hadamard_product_(matrices)&quot;&gt;Hadamard product&lt;&#x2F;a&gt;. Most of the time, we will use &amp;quot;dot product&amp;quot; operation, 
however in one place Hadamard product is going to be used (back-propagation part).&lt;&#x2F;p&gt;
&lt;p&gt;All extension methods are delegating the operations to plain Scala functions in the Tensor singleton object.&lt;&#x2F;p&gt;
&lt;p&gt;Before checking some of the implementations for Tensor operations, let&#x27;s look on 3 cases of Tensor itself.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt; Tensor0D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ClassTag&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](data: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;) extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]:  
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;....

case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt; Tensor1D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ClassTag&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](data: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]) extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]:
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;....

case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt; Tensor2D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ClassTag&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](data: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]]) extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]:
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;....
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;From math perspective, first instance is a scalar number, second is a vector and third is a matrix. Of course, we could implement
tensors in more generic way and invent some N-dimensional array that would support 3, 4 and any number of dimensions,
but I think from our personal learning perspective, making more concrete hard-coded classes would be easier to understand the whole ANN 
implementation.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;matmul&quot;&gt;Matmul&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s look only at one important operation from Tensor API which is dot product.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;mul&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ClassTag&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Numeric&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](a: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;b: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; b) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;match
    case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor0D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(data)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;t) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;      scalarMul(t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; data)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor0D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(data)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;      scalarMul(t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; data)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor1D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(data)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor2D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(data2)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor2D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(matMul(asColumn(data)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; data2))
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor2D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(data)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor1D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(data2)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor2D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(matMul(data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; asColumn(data2)))
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor1D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(data)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor1D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(data2)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor1D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(matMul(asColumn(data)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(data2))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;head)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor2D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(data)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor2D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(data2)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor2D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(matMul(data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; data2))

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;private def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;matMul&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ClassTag&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Numeric&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](
      a: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;b: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]]
  )(using n: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Numeric&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;    assert(
      a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;length &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;The number of columns in the first matrix should be equal &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; + 
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;to the number of rows in the second, ${a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;length} != ${b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;length}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val rows =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;length
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val cols =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; colsCount(b)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val res = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;ofDim[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](rows&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; cols)

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; i &amp;lt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; until rows)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;indices &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;do
      for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; j &amp;lt;- (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; until cols)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;indices &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;do
        var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;sum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;zero
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; k &amp;lt;- b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;indices &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;          sum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; sum + (a(i)(k) * b(k)(j))
        res(i)(j) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; sum
    res    
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;First we select specific type of multiplication based on the tensor dimension. &lt;&#x2F;li&gt;
&lt;li&gt;If tensor is not scalar, then we try to use matrix multiplication. Here, if some of the operands is vector we make that vector as matrix
with one column according to math convention. &lt;&#x2F;li&gt;
&lt;li&gt;Later we check operands dimensions, as they must obey rules of
matrix multiplication. If rules are not met we throw an error. No Scala &lt;code&gt;Either&lt;&#x2F;code&gt; type or other error modelling is used to not clutter the code. Our goal is to stay as close as possible to math and keep balance between using types and readability.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;See &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;novakov-alexey&#x2F;deep-learning-scala&#x2F;blob&#x2F;master&#x2F;src&#x2F;main&#x2F;scala&#x2F;ml&#x2F;tensors&#x2F;ops.scala&quot;&gt;source code on GitHub&lt;&#x2F;a&gt; for full implementation of tensor library.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;neural-network-dsl&quot;&gt;Neural Network DSL&lt;&#x2F;h1&gt;
&lt;p&gt;Let&#x27;s define a trait for abstract model that can learn:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;sealed trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt; Model&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]:
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;train&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(x: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;y: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;epochs: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Model&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;predict&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(x: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;reset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Model&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;currentWeights&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Weight&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]]
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;losses&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The first two methods are the main ones. &lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;We can use &lt;code&gt;train&lt;&#x2F;code&gt; to provide input features as &lt;code&gt;x&lt;&#x2F;code&gt; and target values as &lt;code&gt;y&lt;&#x2F;code&gt;, specify
number of training cycles as &lt;code&gt;epochs&lt;&#x2F;code&gt; to learn the right parameters for future predictions.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;predict&lt;&#x2F;code&gt; allows us to infer target value by giving only &lt;code&gt;x&lt;&#x2F;code&gt; data&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;reset&lt;&#x2F;code&gt; cleans model weights, so that it initialises them again upon next training&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;currentWeights&lt;&#x2F;code&gt; and &lt;code&gt;losses&lt;&#x2F;code&gt; are returning weights and losses of the last training cycle.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Machine learning model is a stateful thing. It keeps list of parameters called weights and biases of type &lt;code&gt;List[Weight[T]]&lt;&#x2F;code&gt;.
These parameters are the heart of the model. They are mutating on every training epoch and data batch.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;model-initialisation&quot;&gt;Model initialisation&lt;&#x2F;h2&gt;
&lt;p&gt;Before designing neural network training API, let&#x27;s look at entities we need:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt; ActivationFunc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]:
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;apply&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(x: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;derivative&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(x: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt; Loss&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]:
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;apply&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(actual: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;predicted: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;sealed trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt; Layer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]:
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;units&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int
  def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ActivationFunc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt; Dense&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](f: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ActivationFunc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;units: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;) extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Layer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt; Weight&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](
  w: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;b: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, 
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;f: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ActivationFunc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;units: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;*
 * z - before activation = w * x
 * a - activation value
 *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt; Activation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](x: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;z: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;a: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;])
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We have modelled network parameters as traits with implementations as case classes. Later we use 
them to create an instance of the model.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt; RandomGen&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]:
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;gen&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt; Sequential&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ClassTag&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;RandomGen&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Numeric&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;U&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Optimizer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](
    lossFunc: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Loss&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;learningRate: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;metric: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Metric&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;batchSize: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;weightStack: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Weight&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;empty[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Weight&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,    
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;weights: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Weight&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Nil&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;losses: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Nil
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;) extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Model&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]:

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(layer: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Layer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Sequential&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;U&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;    copy(weightStack &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(inputs) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;{
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val currentWeights =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; weightStack(inputs)
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val prevInput =
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;        currentWeights&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;reverse&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;headOption&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;units)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;getOrElse(inputs)
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val w =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; random2D(prevInput&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; layer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;units)
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val b =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; zeros(layer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;units)
      (currentWeights :+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Weight&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; layer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; layer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;units))
    })
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There are bunch of parameters that we need in simple sequential model with fully connected layers:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Generic type &lt;code&gt;T&lt;&#x2F;code&gt; is numeric type of the data which can be &lt;code&gt;Float&lt;&#x2F;code&gt;, &lt;code&gt;Double&lt;&#x2F;code&gt;, &lt;code&gt;Int&lt;&#x2F;code&gt;, etc. Most of the time you want numbers with floating point in machine learning.&lt;&#x2F;li&gt;
&lt;li&gt;Random generator can be provided as contextual abstraction (given instance). It is used to initialise
weights and biases for every layer.&lt;&#x2F;li&gt;
&lt;li&gt;Generic &lt;code&gt;U&lt;&#x2F;code&gt; is a type of optimisation algorithm that we use in back-propagation part of the training cycle. Also given as type class instance.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;learningRate&lt;&#x2F;code&gt; and &lt;code&gt;batchSize&lt;&#x2F;code&gt; are hyper-parameters to be tuned externally.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;weightStack&lt;&#x2F;code&gt; is a function that construct list of initial layers based on the provided earlier Layer configuration via
method &lt;code&gt;add&lt;&#x2F;code&gt;.  It is not supposed to be called manually. The &lt;code&gt;weightStack&lt;&#x2F;code&gt; function is called by &lt;code&gt;train&lt;&#x2F;code&gt; 
method internally to create initial list of weights, if weights are empty. If they 
are not empty, they are reused.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;This is how a user is supposed to use such API:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val accuracy =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; accuracyMetric[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]
  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val ann = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Sequential&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;SimpleGD&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](
  binaryCrossEntropy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;  learningRate &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;05&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;  metric &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; accuracy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;  batchSize &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;32
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;add(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Dense&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(relu&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;))
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;add(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Dense&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(relu&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;))    
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;add(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Dense&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(sigmoid))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There is a type &lt;code&gt;SimpleGD&lt;&#x2F;code&gt; that picks up a required instance of &lt;code&gt;Optimizer&lt;&#x2F;code&gt; implementation. See details below.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;training-loop&quot;&gt;Training loop&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;train&lt;&#x2F;code&gt; method runs &lt;code&gt;trainEpoch&lt;&#x2F;code&gt; multiple times, which is equal to &lt;code&gt;epochs&lt;&#x2F;code&gt; parameter. 
Every training epoch returns new weights list, which is used again for the next epoch. This loop may run, for example, 100 times.
Also, we collect a list of average loss values and print a user metric value. We have set &lt;code&gt;accuracy&lt;&#x2F;code&gt; metric as per code earlier.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;train&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(x: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;y: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;epochs: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Model&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=
  lazy val inputs =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;cols
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;lazy val actualBatches =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;batches(batchSize)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;toArray
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;lazy val xBatches =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;batches(batchSize)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;zip(actualBatches)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;toArray
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;lazy val w =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; getWeights(inputs)

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;updatedWeights&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;epochLosses&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; to epochs)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;foldLeft((w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;empty[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;])) {
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;((weights&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;losses)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;epoch) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;
        val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;avgLoss&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;metricValue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; trainEpoch(xBatches&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; weights)
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val metricAvg =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; metric&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;average(x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; metricValue)
        println(
          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;epoch: $epoch&#x2F;$epochs, avg. loss: $avgLoss, 
          ${metric&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;name}: $metricAvg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
        (w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; losses :+ avgLoss)
    }
  copy(weights &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; updatedWeights&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; losses &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; epochLosses)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;trainEpoch&lt;&#x2F;code&gt; is implementing forward- and back-propagation for every data sample batch:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;private def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;trainEpoch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(
    batches: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]])]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;weights: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Weight&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]]
) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=
  val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;l&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;metricValue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;    batches&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;foldLeft(weights&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;empty[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;) {
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;((weights&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;batchLoss&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;metricAcc)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(xBatch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;yBatch)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; forward
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val activations =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; activate(xBatch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;as2D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; weights)
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val actual =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; yBatch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;as2D          
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val predicted =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; activations&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;last&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;a          
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val error =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; predicted - actual          
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val loss =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; lossFunc(actual&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; predicted)

        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; backward
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val updated =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; summon[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Optimizer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;U&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;updateWeights(
          weights&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;          activations&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;          error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;          learningRate
        )
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val metricValue =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; metric&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;calculate(actual&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; predicted)
        (updated&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; batchLoss :+ loss&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; metricAcc + metricValue)
    }    
  (w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; getAvgLoss(l)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; metricValue)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;gradient-descent-optimizer&quot;&gt;Gradient Descent Optimizer&lt;&#x2F;h3&gt;
&lt;p&gt;Now let&#x27;s look at optimizer code. It implements standard gradient descent algorithm:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;sealed trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt; Optimizer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;U&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]:
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;updateWeights&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Numeric&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ClassTag&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](
    weights: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Weight&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;activations: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Activation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;error: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;learningRate: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Weight&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]]

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;type SimpleGD
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In order to update weights an optimizer needs:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;the list of weights to update&lt;&#x2F;li&gt;
&lt;li&gt;current activations for all layers&lt;&#x2F;li&gt;
&lt;li&gt;calculated error: yHat vs. y&lt;&#x2F;li&gt;
&lt;li&gt;learningRate parameter, which is static for the entire training cycle&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;code&gt;SimpleGD&lt;&#x2F;code&gt; type is a token to summon an optimizer instance. In future, we can extend optimizers with other algorithms.&lt;&#x2F;p&gt;
&lt;p&gt;Data batching is happening outside of the optimizer, in the &lt;code&gt;train&lt;&#x2F;code&gt; method.
We can select either full batch or mini-batch training by specifying a number of records in the batch. 
So that is why this optimizer is not specific type of gradient descent (stochastic, mini-batch, batch), but just works with 
whatever weights are given for updates.&lt;&#x2F;p&gt;
&lt;p&gt;Actual implementation of the gradient descent optimization:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;given &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Optimizer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;SimpleGD&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] with
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;override def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;updateWeights&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Numeric&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ClassTag&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](
      weights: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Weight&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;activations: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Activation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;error: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;learningRate: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Weight&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=      
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;    weights
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;zip(activations)
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;foldRight(
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;empty[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Weight&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;        error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]]
      ) {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(
              (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Weight&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;u)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Activation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;z&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(ws&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;prevDelta&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;prevWeight)
            ) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;            
          val delta = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(prevWeight &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;{
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(pw) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; prevDelta * pw&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;None     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; prevDelta
          }) multiply f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;derivative(z)

          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val partialDerivative =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; * delta
          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val newWeight =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; w - (learningRate * partialDerivative)
          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val newBias =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; b - (learningRate * delta&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;sum)
          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val updated = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Weight&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(newWeight&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; newBias&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; u) +: ws
          (updated&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; delta&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(w))
      }
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;_1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The weights update starts from tail and moves to the head of the list, i.e. from the last layer to the first hidden layer.
&lt;code&gt;weights&lt;&#x2F;code&gt; and &lt;code&gt;activations&lt;&#x2F;code&gt; are equal in length, since the last one is produced via the weight list during the forward-propagation. &lt;&#x2F;p&gt;
&lt;p&gt;The complex part is calculating the &lt;code&gt;delta&lt;&#x2F;code&gt; that we use for partial derivative. &lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Initial &lt;code&gt;delta&lt;&#x2F;code&gt; is equal to &lt;code&gt;error&lt;&#x2F;code&gt;. Next layer is calculating &lt;code&gt;delta&lt;&#x2F;code&gt; on its own, which is a dot product of previous layer &lt;code&gt;delta&lt;&#x2F;code&gt; and &lt;code&gt;weights&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Last layer does not have previous weights.&lt;&#x2F;li&gt;
&lt;li&gt;Every &lt;code&gt;delta&lt;&#x2F;code&gt; is then multiplied by activation function derivative: &lt;code&gt;f.derivative(z)&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;The rest part is simpler and more or less linear. We calculate &lt;code&gt;partialDerivative&lt;&#x2F;code&gt; and update layer weights and biases.&lt;&#x2F;li&gt;
&lt;li&gt;We pass current layer weight and delta to the next layer. Usage of &lt;code&gt;foldRight&lt;&#x2F;code&gt; helps us easily to pass these parameters to the next layer.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;This folding loop returns updated list of weights, which is, of course, has equal length comapre to the original list.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;data-preparation&quot;&gt;Data Preparation&lt;&#x2F;h1&gt;
&lt;p&gt;Before we start learning, we need to prepare initial data for the training. 
Unfortunately, data preparation requires us quite a lot of code to write. &lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;createEncoders&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Numeric&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ClassTag&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](
    data: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor2D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]
  ): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor2D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor2D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=
  val encoder = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;LabelEncoder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;fit(data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;col(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;))
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val hotEncoder = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;OneHotEncoder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;fit(data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;col(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;))
  
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val label = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; encoder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;transform(x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val hot = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; hotEncoder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;transform(x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val typeTransform = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(x: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor2D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; transform[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;data)
  
  label andThen hot andThen typeTransform
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val dataLoader = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;TextLoader&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;of(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;data&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;Churn_Modelling.csv&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;load()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val data =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; dataLoader&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;cols[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val encoders =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; createEncoders[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](data)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val numericData =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; encoders(data)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val scaler = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;StandardScaler&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;fit(numericData)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val prepareData = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(d: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Tensor2D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;{
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val numericData =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; encoders(d)
  scaler&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;transform(numericData)
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val x =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; prepareData(data)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val y =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; dataLoader&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;cols[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;First, we load raw data from a CSV file, then we select all columns between 3-rd and last one (-1 means: length - 1).&lt;&#x2F;li&gt;
&lt;li&gt;Initial data is of &lt;code&gt;String&lt;&#x2F;code&gt; type, later we choose numerical data type such as &lt;code&gt;Float&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;We compose label, one-hot encoders and data type transformer into a function inside the &lt;code&gt;createEncoders&lt;&#x2F;code&gt; function. That allows us to use &lt;code&gt;prepareData&lt;&#x2F;code&gt; function later for validation dataset.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;y&lt;&#x2F;code&gt; data we take from the last column of the dataset.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;I am not going to describe the entire code of data preparation classes. The goal of encoders is to 
prepare data for deep neural network training and inference. We normalise all columns as per their individual means and 
standard deviations. Also, we encode categorical columns using &lt;code&gt;0&lt;&#x2F;code&gt; and &lt;code&gt;1&lt;&#x2F;code&gt; using &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;One-hot&quot;&gt;one-hot encoding&lt;&#x2F;a&gt; approach.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;training-run&quot;&gt;Training Run&lt;&#x2F;h1&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;xTrain&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;xTest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;yTrain&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;yTest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; y)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;split(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val model =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; ann&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;train(xTrain&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; yTrain&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; epochs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We split &lt;code&gt;x&lt;&#x2F;code&gt; and &lt;code&gt;y&lt;&#x2F;code&gt; data into 80% and 20% parts for training and testing accordingly.
Finally, we execute the training for 100 &lt;code&gt;epochs&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;sbt:ann&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; run
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;[info]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; running starter
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 1&#x2F;100, avg. loss: 0.30220446, accuracy: 0.782
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 2&#x2F;100, avg. loss: 0.30736533, accuracy: 0.811375
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 3&#x2F;100, avg. loss: 0.30326372, accuracy: 0.818125
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 4&#x2F;100, avg. loss: 0.30306807, accuracy: 0.818875
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 5&#x2F;100, avg. loss: 0.3028989, accuracy: 0.820125
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 6&#x2F;100, avg. loss: 0.30242646, accuracy: 0.82025
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 7&#x2F;100, avg. loss: 0.3018655, accuracy: 0.8195
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 8&#x2F;100, avg. loss: 0.30157945, accuracy: 0.81975
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 9&#x2F;100, avg. loss: 0.3014126, accuracy: 0.819875
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 10&#x2F;100, avg. loss: 0.30122074, accuracy: 0.819625
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 11&#x2F;100, avg. loss: 0.3009277, accuracy: 0.81975
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 12&#x2F;100, avg. loss: 0.30088165, accuracy: 0.82
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 13&#x2F;100, avg. loss: 0.30078012, accuracy: 0.8205
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 14&#x2F;100, avg. loss: 0.30074772, accuracy: 0.8205
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 15&#x2F;100, avg. loss: 0.30070674, accuracy: 0.8205
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 16&#x2F;100, avg. loss: 0.30053124, accuracy: 0.82025
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 17&#x2F;100, avg. loss: 0.2976923, accuracy: 0.81975
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 18&#x2F;100, avg. loss: 0.2536276, accuracy: 0.84275
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 19&#x2F;100, avg. loss: 0.24473017, accuracy: 0.85675
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 20&#x2F;100, avg. loss: 0.24557488, accuracy: 0.857125
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 21&#x2F;100, avg. loss: 0.24528943, accuracy: 0.857875
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 22&#x2F;100, avg. loss: 0.2451054, accuracy: 0.857125
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 23&#x2F;100, avg. loss: 0.24494325, accuracy: 0.857375
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 24&#x2F;100, avg. loss: 0.24466132, accuracy: 0.857
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 25&#x2F;100, avg. loss: 0.24451153, accuracy: 0.857625
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 26&#x2F;100, avg. loss: 0.24442412, accuracy: 0.857375
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 27&#x2F;100, avg. loss: 0.24431105, accuracy: 0.857625
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 28&#x2F;100, avg. loss: 0.24418788, accuracy: 0.857375
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 29&#x2F;100, avg. loss: 0.2440211, accuracy: 0.85775
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 30&#x2F;100, avg. loss: 0.24400905, accuracy: 0.85725
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 31&#x2F;100, avg. loss: 0.24397133, accuracy: 0.85725
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 32&#x2F;100, avg. loss: 0.24386458, accuracy: 0.857375
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 33&#x2F;100, avg. loss: 0.24389265, accuracy: 0.8575
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 34&#x2F;100, avg. loss: 0.24378827, accuracy: 0.857375
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 35&#x2F;100, avg. loss: 0.24381112, accuracy: 0.857875
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 36&#x2F;100, avg. loss: 0.2437651, accuracy: 0.857875
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 37&#x2F;100, avg. loss: 0.24369456, accuracy: 0.85775
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 38&#x2F;100, avg. loss: 0.24377964, accuracy: 0.857625
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 39&#x2F;100, avg. loss: 0.2435442, accuracy: 0.85775
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 40&#x2F;100, avg. loss: 0.24363366, accuracy: 0.858125
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 41&#x2F;100, avg. loss: 0.24358764, accuracy: 0.858125
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 42&#x2F;100, avg. loss: 0.24355079, accuracy: 0.858375
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 43&#x2F;100, avg. loss: 0.24369176, accuracy: 0.858125
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 44&#x2F;100, avg. loss: 0.24361038, accuracy: 0.858125
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 45&#x2F;100, avg. loss: 0.24359651, accuracy: 0.858125
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 46&#x2F;100, avg. loss: 0.24361634, accuracy: 0.858125
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 47&#x2F;100, avg. loss: 0.24357627, accuracy: 0.858
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 48&#x2F;100, avg. loss: 0.24334462, accuracy: 0.85825
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 49&#x2F;100, avg. loss: 0.24335352, accuracy: 0.858
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 50&#x2F;100, avg. loss: 0.24341401, accuracy: 0.858375
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 51&#x2F;100, avg. loss: 0.24324806, accuracy: 0.8585
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 52&#x2F;100, avg. loss: 0.24296027, accuracy: 0.858
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 53&#x2F;100, avg. loss: 0.24271448, accuracy: 0.85775
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 54&#x2F;100, avg. loss: 0.24256946, accuracy: 0.85825
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 55&#x2F;100, avg. loss: 0.24257207, accuracy: 0.858125
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 56&#x2F;100, avg. loss: 0.24284393, accuracy: 0.8585
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 57&#x2F;100, avg. loss: 0.2430726, accuracy: 0.85825
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 58&#x2F;100, avg. loss: 0.2431463, accuracy: 0.858125
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 59&#x2F;100, avg. loss: 0.24277006, accuracy: 0.857625
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 60&#x2F;100, avg. loss: 0.2423336, accuracy: 0.8585
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 61&#x2F;100, avg. loss: 0.24251764, accuracy: 0.858125
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 62&#x2F;100, avg. loss: 0.24255769, accuracy: 0.858625
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 63&#x2F;100, avg. loss: 0.2427412, accuracy: 0.85825
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 64&#x2F;100, avg. loss: 0.2428449, accuracy: 0.85825
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 65&#x2F;100, avg. loss: 0.24228723, accuracy: 0.858625
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 66&#x2F;100, avg. loss: 0.24231568, accuracy: 0.85875
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 67&#x2F;100, avg. loss: 0.24237442, accuracy: 0.858125
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 68&#x2F;100, avg. loss: 0.24238351, accuracy: 0.8585
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 69&#x2F;100, avg. loss: 0.24219948, accuracy: 0.859125
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 70&#x2F;100, avg. loss: 0.24231845, accuracy: 0.858875
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 71&#x2F;100, avg. loss: 0.24243066, accuracy: 0.85875
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 72&#x2F;100, avg. loss: 0.2423754, accuracy: 0.859
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 73&#x2F;100, avg. loss: 0.24225388, accuracy: 0.8585
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 74&#x2F;100, avg. loss: 0.2420498, accuracy: 0.858875
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 75&#x2F;100, avg. loss: 0.24199313, accuracy: 0.858625
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 76&#x2F;100, avg. loss: 0.2420193, accuracy: 0.858875
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 77&#x2F;100, avg. loss: 0.24175513, accuracy: 0.85875
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 78&#x2F;100, avg. loss: 0.24191435, accuracy: 0.859625
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 79&#x2F;100, avg. loss: 0.2418117, accuracy: 0.85925
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 80&#x2F;100, avg. loss: 0.24193105, accuracy: 0.859125
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 81&#x2F;100, avg. loss: 0.24175763, accuracy: 0.859375
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 82&#x2F;100, avg. loss: 0.24183328, accuracy: 0.859375
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 83&#x2F;100, avg. loss: 0.24171984, accuracy: 0.85975
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 84&#x2F;100, avg. loss: 0.2419013, accuracy: 0.859125
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 85&#x2F;100, avg. loss: 0.24182202, accuracy: 0.859625
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 86&#x2F;100, avg. loss: 0.24179217, accuracy: 0.859875
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 87&#x2F;100, avg. loss: 0.2416485, accuracy: 0.859875
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 88&#x2F;100, avg. loss: 0.24175707, accuracy: 0.86
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 89&#x2F;100, avg. loss: 0.24161652, accuracy: 0.85975
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 90&#x2F;100, avg. loss: 0.24164297, accuracy: 0.8595
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 91&#x2F;100, avg. loss: 0.24179684, accuracy: 0.859625
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 92&#x2F;100, avg. loss: 0.2417788, accuracy: 0.859875
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 93&#x2F;100, avg. loss: 0.24164356, accuracy: 0.859875
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 94&#x2F;100, avg. loss: 0.24161309, accuracy: 0.8595
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 95&#x2F;100, avg. loss: 0.24144296, accuracy: 0.85975
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 96&#x2F;100, avg. loss: 0.24163213, accuracy: 0.85975
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 97&#x2F;100, avg. loss: 0.24149604, accuracy: 0.86
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 98&#x2F;100, avg. loss: 0.24137497, accuracy: 0.85925
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 99&#x2F;100, avg. loss: 0.24164252, accuracy: 0.859625
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;epoch:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 100&#x2F;100, avg. loss: 0.24153009, accuracy: 0.85975
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;training&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; time: 5.654 in sec
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can see that &lt;code&gt;accuracy&lt;&#x2F;code&gt; is increasing quite quick. Also, loss value is becoming stable already after 20 epochs.&lt;&#x2F;p&gt;
&lt;p&gt;Entire training for 8000 data samples takes less than 6 seconds.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;testing&quot;&gt;Testing&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;single-test&quot;&gt;Single Test&lt;&#x2F;h2&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; Single test
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val example = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;TextLoader&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;n&#x2F;a,n&#x2F;a,n&#x2F;a,600,France,Male,40,3,60000,2,1,1,50000,n&#x2F;a&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;cols[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val testExample =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; prepareData(example)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val exited = 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;  predictedToBinary(model&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;predict(testExample)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;as1D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;head) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;println(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;Exited customer? $exited&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We use &lt;code&gt;predict&lt;&#x2F;code&gt; method on the model to test prediction on the single data sample:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;Exited&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; customer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; false
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;dataset-test&quot;&gt;Dataset Test&lt;&#x2F;h2&gt;
&lt;p&gt;We have left 20% of the initial data for testing purposes. So now we can check trained model accuracy on new data 
that model had never seen before:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val testPredicted =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; model&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;predict(xTest)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val value =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; accuracy(yTest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; testPredicted)
println(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;test accuracy = $value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)  
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Model accuracy on unseen data is quite as well:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; accuracy = 0.8625
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h1 id=&quot;python-implementation&quot;&gt;Python Implementation&lt;&#x2F;h1&gt;
&lt;p&gt;Almost the same implementation in Python takes much longer to train the model. 
Although, we are using a bit more advanced optimizer such as &lt;code&gt;Adam&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Here is the code snippet that starts model training:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;ann&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;compile&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(optimizer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;#39;adam&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;\
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;loss &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;#39;binary_crossentropy&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;metrics &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;#39;accuracy&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;])

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;time
start &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;process_time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;()
ann&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;fit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(X_train&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;y_train&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;batch_size &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;epochs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
end &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;process_time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;start
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#88c0d0;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;training time = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;{end}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; sec&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;training&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; time = 24.495086
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It is almost 5 times longer. I knew that Python is slow language.&lt;&#x2F;p&gt;
&lt;p&gt;See full code here: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;novakov-alexey&#x2F;tensorflow-ann-python&#x2F;blob&#x2F;main&#x2F;artificial_neural_network.py&quot;&gt;tensorflow-ann-python&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;summary&quot;&gt;Summary&lt;&#x2F;h1&gt;
&lt;p&gt;We have seen that Scala implementation looks very concise thanks to the great language design.
It also works faster than Python implementation in Keras on CPU.&lt;&#x2F;p&gt;
&lt;p&gt;Artificial Neural Network can be understood by newbies as magic, 
but a closer look shows that basic building blocks are just math.&lt;&#x2F;p&gt;
&lt;p&gt;Being a functional programmer in Scala, you may find that some of the code is not doing total functions, but partial functions by throwing erros. 
Unfortunatelly, there are several possibilities where user may provide
wrong inputs from math perspective, so that we could return an &lt;a href=&quot;https:&#x2F;&#x2F;www.scala-lang.org&#x2F;api&#x2F;current&#x2F;scala&#x2F;util&#x2F;Either.html&quot;&gt;Either.Left&lt;&#x2F;a&gt; or something like that to mitigate this problem.&lt;&#x2F;p&gt;
&lt;p&gt;Making a machine learning library is fun, since it is just algorithms and in-memory computations.
You do not need to deal with that much I&#x2F;O, networking or distributed systems programming.
Main part even does not parallelise, so no concurrency and cognitive overhead related with it. 
Of course, to make an ML library today for real life, you would require &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;General-purpose_computing_on_graphics_processing_units&quot;&gt;support of GPU&lt;&#x2F;a&gt; for faster, parallel computation.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Implemented code demonstrates two points:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;ANN is an algorithm that you can implement yourself in any programming language. No magic is involved.&lt;&#x2F;li&gt;
&lt;li&gt;Scala is a perfect language to implement libraries for data science and machine learning.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;source-code&quot;&gt;Source Code&lt;&#x2F;h1&gt;
&lt;p&gt;Entire code of the Scala ANN implementation can be found here:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;novakov-alexey&#x2F;deep-learning-scala&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;novakov-alexey&#x2F;deep-learning-scala&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;reference-links&quot;&gt;Reference Links&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.bogotobogo.com&#x2F;python&#x2F;scikit-learn&#x2F;Artificial-Neural-Network-ANN-4-Backpropagation.php&quot;&gt;Artificial-Neural-Network-ANN-4-Backpropagation&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;riptutorial.com&#x2F;machine-learning&#x2F;example&#x2F;31623&#x2F;backpropagation---the-heart-of-neural-networks&quot;&gt;backpropagation---the-heart-of-neural-networks&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;arxiv.org&#x2F;pdf&#x2F;1609.04747.pdf&quot;&gt;An overview of gradient descent optimization algorithms&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Ammonite Kafka Producer</title>
		<published>2020-11-29T00:00:00+00:00</published>
		<updated>2020-11-29T00:00:00+00:00</updated>
		<link href="https://novakov-alexey.github.io/ammonite-kafka/" type="text/html"/>
		<id>https://novakov-alexey.github.io/ammonite-kafka/</id>
		<content type="html">&lt;p&gt;If you need to run a Scala code as a script, i.e. using Scala source file to execute some short code, 
then &lt;a href=&quot;https:&#x2F;&#x2F;ammonite.io&#x2F;#ScalaScripts&quot;&gt;Ammonite Scripts&lt;&#x2F;a&gt;
may be a solution for you. &lt;a href=&quot;https:&#x2F;&#x2F;ammonite.io&#x2F;#Ammonite&quot;&gt;Ammonite project consists&lt;&#x2F;a&gt; of a REPL, script launcher and a few Scala libraries.&lt;br &#x2F;&gt;
Let’s write a script to generate JSON data and send it to &lt;a href=&quot;https:&#x2F;&#x2F;kafka.apache.org&#x2F;documentation&#x2F;#quickstart_createtopic&quot;&gt;Apache Kafka topic&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h1 id=&quot;create-scripts&quot;&gt;Create scripts&lt;&#x2F;h1&gt;
&lt;p&gt;We are going to create two scripts. One script will be importing another script definitions. 
In this case will be able to organise our code in modules. Even short scripts may become complex and should be a bit organised for better code maintenance.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;first-script-generate-data&quot;&gt;First Script - Generate Data&lt;&#x2F;h2&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;touch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; common.sc
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This script imports two libraries:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;scalacheck&lt;&#x2F;code&gt; for data generation&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;circe&lt;&#x2F;code&gt; to format case classes to JSON text&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; $ivy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;`org.scalacheck::scalacheck:1.14.3`
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; $ivy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;`io.circe::circe-generic:0.13.0`

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; io&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;circe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;generic&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;._&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; io&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;circe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;syntax&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;._
import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; org&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;scalacheck&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;Gen

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt; Sensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(number: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;lat: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Double&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;lon: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Double&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;address: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt; Event&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(time: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Long&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;temperature: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;sensor: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Sensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val sensor1 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Sensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;75&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;5712&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;130&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;5355&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;123 Main St, LAX, CA&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val sensor2 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Sensor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;48&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;8712&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;151&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;6866&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;456 Side St, SFO, CA&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val sensors = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Gen&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;oneOf(sensor1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; sensor2)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val temperature = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Gen&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;choose(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;21&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;25&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;genEvent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=
  for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;{
    s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; sensors
    t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; temperature
  } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;yield &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Event&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;currentTimeMillis()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; s)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;genBatch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(size: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=
  for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;{
    events &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Gen&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;listOfN(size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; genEvent)
    dataBatch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; events&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;asJson&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;noSpaces)
  } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;yield&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; dataBatch
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;genBatch&lt;&#x2F;code&gt; is main function in this script to be used by another&#x2F;main script. It generates &lt;code&gt;List[String]&lt;&#x2F;code&gt; as return value. 
Every string in the list is a JSON text to be sent to Kafka topic.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;second-script-send-data&quot;&gt;Second Script - Send Data&lt;&#x2F;h2&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;touch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; kafka-producer.sc
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Add below Scala code statements to import Kafka library, Scala, Java classes into our script&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; file import explained later 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; $file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;common
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; Ammonite imports library automatically!
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; $ivy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;`org.apache.kafka:kafka-clients:1.0.0`

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; common&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;._
import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; org&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;apache&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;kafka&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;clients&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;producer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;Producer
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; org&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;apache&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;kafka&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;clients&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;producer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;ProducerRecord
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; org&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;apache&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;kafka&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;clients&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;producer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;KafkaProducer
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; org&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;apache&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;kafka&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;clients&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;producer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;ProducerConfig
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; org&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;apache&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;kafka&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;common&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;serialization&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;LongSerializer
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; org&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;apache&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;kafka&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;common&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;serialization&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;StringSerializer
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; java&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;util&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;Properties
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; java&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;io&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;FileReader
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; java&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;io&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;File
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; scala&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;annotation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;tailrec
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; scala&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;util&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;Using
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; scala&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;io&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;Source
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In order to make this script executable we need to annotate one of the method by &lt;code&gt;@main&lt;&#x2F;code&gt; annotation:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;@main
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(topicName: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;delay: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;{
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; create producer properties
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val configFile = new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;File&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;.&#x2F;producer.properties&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val props = new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Properties&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;()
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Using&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;resource(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;FileReader&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(configFile)) { reader &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;    props&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;load(reader)
  }
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val bootstrapFile = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;bootstrap-servers.txt&amp;quot;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val servers = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Using&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;resource(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Source&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;fromFile(bootstrapFile)) {
    file &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;      file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;getLines&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;toList&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;headOption
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;getOrElse(sys&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;error(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;$bootstrapFile file is empty!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;))
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;trim
  }
  props&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;put(
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;bootstrap.servers&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;    servers
  )
  props&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;put(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ProducerConfig&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;CLIENT_ID_CONFIG&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;KafkaExampleProducer&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
  props&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;put(
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ProducerConfig&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;KEY_SERIALIZER_CLASS_CONFIG&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;    classOf[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;LongSerializer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;getName
  )
  props&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;put(
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ProducerConfig&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;VALUE_SERIALIZER_CLASS_CONFIG&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;    classOf[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;StringSerializer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;getName
  )
  props&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;put(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ProducerConfig&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ACKS_CONFIG&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;all&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
 
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; create producer
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val producer = new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;KafkaProducer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Long&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](props)
 
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; send data to Kafka
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;  sendData(producer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; topicName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; delay)
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In the main function we use regular Scala code to:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;read producer properties&lt;&#x2F;li&gt;
&lt;li&gt;read Kafka broker&#x2F;bootstrap hostnames&lt;&#x2F;li&gt;
&lt;li&gt;create &lt;code&gt;KafkaProducer&lt;&#x2F;code&gt; using Java Kafka library API&lt;&#x2F;li&gt;
&lt;li&gt;send data to Kafka topic infinitely &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Above main function can be executed now via:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;amm&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; kafka-producer.sc --topicName test --delay 1000
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;However, it won&#x27;t compile until we add &lt;code&gt;sendData&lt;&#x2F;code&gt; function.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;@tailrec
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;sendData&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(
    producer: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Producer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Long&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;topic: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;delay: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Unit = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;{
  genBatch()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;sample&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;foreach { json &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;    println(json)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val record = new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ProducerRecord&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(topic&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;currentTimeMillis()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; json)
    producer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;send(
      record&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(metadata, ex) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(ex)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;foreach { t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;
          throw new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;RuntimeException&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;Failed to send the data: $json&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; t)
        }
      }
    )
  }
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Thread&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;sleep(delay)
  sendData(producer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; topic&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; delay)
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;sendData&lt;&#x2F;code&gt; is calling &lt;code&gt;genBatch()&lt;&#x2F;code&gt; function from the first script &lt;code&gt;common.sc&lt;&#x2F;code&gt;. We imported all definitions from that script via &lt;code&gt;import common._&lt;&#x2F;code&gt;.
Ammonite script launcher compiles all imported scripts automatically, so we need to import it only.&lt;&#x2F;p&gt;
&lt;p&gt;In the &lt;code&gt;sendData&lt;&#x2F;code&gt; function we generate List of JSON strings to send them via Kafka producer. In case we get an exception in producer&#x27;s response, we
throw an exception to stop the script execution. In case there is no exception thrown by the Kafka producer, then &lt;code&gt;sendData&lt;&#x2F;code&gt; is 
sending data to Kafka topic again and again sleeping in between with the user given delay in milliseconds.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;execute-script&quot;&gt;Execute Script&lt;&#x2F;h1&gt;
&lt;p&gt;Before we execute above script, we need to have two configuration files for Kafka Producer.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;touch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; producer.properties
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For example, I have the following properties. In your case, you will have some of them or none of them (if you rely on default Kafka
producer properties):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-properties&quot; data-lang=&quot;properties&quot;&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;# this file content is auto-generated by get-jks.sh
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;ssl.endpoint.identification.algorithm&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;ssl.truststore.location&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&#x2F;ssl&#x2F;producer.truststore.jks
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;ssl.truststore.password&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;your trustore password if any&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;ssl.keystore.location&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&#x2F;ssl&#x2F;producer.keystore.jks
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;ssl.keystore.password&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;your key password if any&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;ssl.key.password&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;your key password if any&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;sasl.mechanism&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;GSSAPI
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;sasl.kerberos.service.name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;kafka
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;security.protocol&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;SASL_SSL
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;sasl.jaas.config&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;com.sun.security.auth.module.Krb5LoginModule required &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    useKeyTab=true &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    storeKey=true &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    useTicketCache=false &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    keyTab=&amp;quot;.&#x2F;client.keytab&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    principal=&amp;quot;my-test@EXAMPLE.COM&amp;quot;;

&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Another file that we used in the main script is file with Kafka broker hostnames. Put your broker hostname(s) or IP address(es) separaing by coma:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;&amp;lt;hostname of the broker 1&amp;gt;,&amp;lt;hostname of the broker 2&amp;gt;....
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Finally, if we run the main script, it will start to print the JSON data that is sent to Kafka topic:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;amm&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; kafka-producer.sc --topicName test --delay 1000
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;Compiling &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;&#x2F;kafka-produce.sc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;time&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;:1606601101634,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;temperature&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;:21.944403,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;sensor&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;:{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;number&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;:2,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;lat&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;:-48.8712,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;lon&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;:-151.6866,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;address&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;456 Side St, SFO, CA&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;}}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;time&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;:1606601101635,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;temperature&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;:24.016523,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;sensor&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;:{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;number&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;:1,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;lat&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;:-75.5712,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;lon&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;:-130.5355,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;address&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;123 Main St, LAX, CA&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;}}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;time&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;:1606601101635,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;temperature&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;:24.302032,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;sensor&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;:{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;number&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;:2,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;lat&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;:-48.8712,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;lon&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;:-151.6866,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;address&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;456 Side St, SFO, CA&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;}}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;time&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;:1606601101635,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;temperature&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;:24.295887,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;sensor&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;:{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;number&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;:2,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;lat&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;:-48.8712,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;lon&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;:-151.6866,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;address&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;456 Side St, SFO, CA&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;}}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;time&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;:1606601101635,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;temperature&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;:24.507029,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;sensor&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;:{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;number&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;:2,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;lat&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;:-48.8712,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;lon&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;:-151.6866,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;address&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;456 Side St, SFO, CA&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;}}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;time&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;:1606601101636,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;temperature&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;:24.488947,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;sensor&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;:{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;number&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;:1,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;lat&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;:-75.5712,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;lon&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;:-130.5355,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;address&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;123 Main St, LAX, CA&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;}}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;.....
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h1 id=&quot;summary&quot;&gt;Summary&lt;&#x2F;h1&gt;
&lt;p&gt;If you want to use Scala for scripting purposes, you can easily do that with Ammonite Scripts.
It allows you to import any JVM library from &lt;a href=&quot;https:&#x2F;&#x2F;search.maven.org&#x2F;&quot;&gt;Sonatype public repository&lt;&#x2F;a&gt;. 
&lt;a href=&quot;(https:&#x2F;&#x2F;ammonite.io&#x2F;#import$ivy)&quot;&gt;Ammonite can be also configured&lt;&#x2F;a&gt; to search any other public or private Maven, Ivy repositories. &lt;&#x2F;p&gt;
&lt;p&gt;Another cool feature of Ammonite Scripts is local &lt;a href=&quot;https:&#x2F;&#x2F;ammonite.io&#x2F;#import$file&quot;&gt;file imports&lt;&#x2F;a&gt;. That allows to write many scripts and organise them in modules, reuse them in many places.
Code editor like VSCode and IntelliJ IDE support Ammonite Scripts well, so that you can benefit from auto-completion and &amp;quot;go to definition&amp;quot; features while writing your code 
with Ammonite Scripts.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.artima.com&#x2F;pins1ed&#x2F;scala-scripts-on-unix-and-windows.html&quot;&gt;Standard Scala SDK can also execute Scala file&lt;&#x2F;a&gt; &lt;code&gt;.scala&lt;&#x2F;code&gt; as shell script. 
One needs to add a special directive at the top of the file, so that the file will be executed via Scala compiler. However, in this way, you can&#x27;t download some library like Ammonite does.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Algorithms: Largest Sum Contiguous Subarray</title>
		<published>2020-08-13T00:00:00+00:00</published>
		<updated>2020-08-13T00:00:00+00:00</updated>
		<link href="https://novakov-alexey.github.io/algorithms-max-sum-in-array/" type="text/html"/>
		<id>https://novakov-alexey.github.io/algorithms-max-sum-in-array/</id>
		<content type="html">&lt;p&gt;Most of the algorithmic tasks are related to iterating over arrays of data. They often can be expressed as a function which takes some input and returns some single value or an array of values. For instance:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;maxSum&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(a: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= ???
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Let&#x27;s solve next task using Scala&#x27;s elegant and concise syntax.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;find-the-max-sum-in-the-given-array&quot;&gt;Find the max sum in the given array&lt;&#x2F;h3&gt;
&lt;p&gt;It is one of the interesting task that I met first time at one of my past job 5 years ago. It was an internal meetup of developers learning new languages as well as training themselves in programming for fun.&lt;&#x2F;p&gt;
&lt;p&gt;Later I use this task in Scala pet-project, called &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;novakov-alexey&#x2F;devgym&quot;&gt;DevGym&lt;&#x2F;a&gt;. Project idea was similar to well-known Codility web-site.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;task&quot;&gt;Task&lt;&#x2F;h3&gt;
&lt;p&gt;There is one array as input and another array as output. See test examples below:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; Given
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;) 

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; Then
       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;2 - 1 + 3 - 3 + 10 = 11&lt;&#x2F;p&gt;
&lt;p&gt;Since &lt;code&gt;11&lt;&#x2F;code&gt; is the max sum we could find within the input array&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F;Given
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F;Then
           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;4 - 1 + 2 + 1 = 6&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;6&lt;&#x2F;code&gt; is the max sum.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;&#x2F;h3&gt;
&lt;p&gt;In general, we can solve this problem in O(n) complexity. By using intermediate variables to 
accumulate current sum as well as max sum, we can find &lt;code&gt;left&lt;&#x2F;code&gt; and &lt;code&gt;right&lt;&#x2F;code&gt; indices, which can be used
to return a sub-array.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;maxSum&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(a: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;{
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;currentSum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;maxSum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;left&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; right&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; maxLeft&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; maxRight &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;maxI &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F;used when all negatives in the array

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;indices) {
    currentSum += a(i)

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(currentSum &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;) {    
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; in case current sum is getting greater,
      &#x2F;&#x2F; then we found next right index with the max sum so far
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(currentSum &amp;gt; maxSum) {        
        maxSum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; currentSum
        right &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; i
        maxRight &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; right
        maxLeft &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; left
      }
    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;{
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; in case new sum is lower than or equal 0, 
      &#x2F;&#x2F; then we need to move left and right index further  
      &#x2F;&#x2F; and continue the search
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;      left &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; i + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;      right &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; left
      currentSum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(a(i) &amp;gt; a(maxI)) maxI &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; i
    }
  }
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; at this point we found left and right
  &#x2F;&#x2F; indices to capture sub-array with max sum
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(maxLeft &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;length) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(a(maxI))
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;slice(maxLeft&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; maxRight + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Above algorithm can be even shorter, if we return only final sum, i.e. without tracking left and right indices.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;summary&quot;&gt;Summary&lt;&#x2F;h1&gt;
&lt;p&gt;Scala is a nice language to solve different algorithmic tasks. Try your next project in Scala, you will be surprised how fun to write code in it. &lt;&#x2F;p&gt;
&lt;p&gt;See my other blog-posts for algorithms in Scala:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;se-notes-by-alexey-novakov&#x2F;algorithms-in-scala-dijkstra-shortest-path-78c4291dd8ab&quot;&gt;Dijkstra shortest path&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;se-notes-by-alexey-novakov&#x2F;rolling-sum-in-scala-6bc9a5a82e75&quot;&gt;Rolling Sum&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>SBT Plugins</title>
		<published>2020-06-29T00:00:00+00:00</published>
		<updated>2020-06-29T00:00:00+00:00</updated>
		<link href="https://novakov-alexey.github.io/sbt-plugins/" type="text/html"/>
		<id>https://novakov-alexey.github.io/sbt-plugins/</id>
		<content type="html">&lt;p&gt;SBT is a Scala Build Tool. It is written in Scala and can compile, build artefacts for Scala and Java projects. SBT is also the first build
tool in the Scala eco-system and the most used one among Scala developers. I am using SBT already for many years and found the following useful plugins which I use in most of my projects:&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;giter8&quot;&gt;Giter8&lt;&#x2F;h2&gt;
&lt;p&gt;It allows to create an SBT project template to ramp up new SBT project. Project template usually includes typical configuration that 
an SBT user copies and pastes from a project to project. User can put any file into a template.&lt;&#x2F;p&gt;
&lt;p&gt;One part of the Giter8 is embedded into SBT. The second part is the Giter8 plugin itself. User can create new SBT project from template hosted at GitHub and that the most useful part. You just need an internet access, then run SBT &lt;code&gt;new&lt;&#x2F;code&gt; command. For example:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;sbt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;novakov&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;-alexey&#x2F;scalaboot&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;g8     
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;scalaboot.g8 is a name of the GitHub repository at my personal account &lt;code&gt;novakov-alexey&lt;&#x2F;code&gt;. SBT converts template name into&lt;br &#x2F;&gt;
https:&#x2F;&#x2F;github.com&#x2F;novakov-alexey&#x2F;scalaboot.g8 path, which you can visit in browser as well. There is also an option to use Giter8 template from the local file system.&lt;&#x2F;p&gt;
&lt;p&gt;Once we run above command, Giter8 creates new project file structure such as:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; build.sbt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; project
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;   ├── Dependencies.scala
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;   ├── build.properties
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;   └── plugins.sbt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; src
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;   ├── main
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;   └── test
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;└──&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; version.sbt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;template-file-structure&quot;&gt;Template File Structure&lt;&#x2F;h3&gt;
&lt;p&gt;Project template is also an SBT project :-). In case of scalaboot.g8 example, it looks like this:&lt;&#x2F;p&gt;
&lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;novakov-alexey.github.io&amp;#x2F;processed_images&amp;#x2F;b26019a8856a76fa00.png&quot; class=&quot;center-image&quot;&#x2F;&gt;
&lt;br&#x2F;&gt;&lt;br&#x2F;&gt;
&lt;p&gt;Content of the g8 folder is a template content which will be used when users apply this template
for their projects. Giter8 template supports properties and special syntax for them. Properties can
be put at any place of your template. Let&#x27;s look at the example in build.sbt file:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ThisBuild&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &#x2F; organization := &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;com.example&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ThisBuild&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &#x2F; scalaVersion := &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;$scalaVersion$&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ThisBuild&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &#x2F; description  := &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;$desc$&amp;quot;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;lazy val root = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(project in file(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;.&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;  settings(
    name := &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;$name;format=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;lower&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;hyphen&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;    libraryDependencies ++= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Seq&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(
      akkaHttp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;      akkaStreams&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;      scalaLogging&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;      logback&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;      …

&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A text between &lt;code&gt;$ ... $&lt;&#x2F;code&gt; is evaluated by Giter8 and replaced by pre-defined or user-given parameters.
In my &lt;code&gt;scalaboot&lt;&#x2F;code&gt; template, I have following pre-defined values:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;src&#x2F;main&#x2F;g8&#x2F;default.properties&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-properties&quot; data-lang=&quot;properties&quot;&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Project Name
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;desc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Describe your project a bit
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;scalaVersion&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;2.13.1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;SBT &lt;code&gt;new&lt;&#x2F;code&gt; command is going through the list of defined properties and sets the default values in case
users do not provide their own values. In the example below, I apply &lt;code&gt;scalaboot&lt;&#x2F;code&gt; template for
project name &lt;code&gt;app-1&lt;&#x2F;code&gt;. I also set my project description and newer Scala version. They will appear in the build.sbt:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;[info]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; Loading settings for project global-plugins from idea.sbt,gpg.sbt ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;[info]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; Loading global plugins from &#x2F;Users&#x2F;alexey&#x2F;.sbt&#x2F;1.0&#x2F;plugins
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;[info]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; Set current project to git (in build file:&#x2F;Users&#x2F;alexey&#x2F;dev&#x2F;git&#x2F;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;Project Name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;: app-1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;desc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;Describe your project a bit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;: order registration
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;scalaVersion &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;2.13.1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;: 2.13.2

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;Template&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; applied in &#x2F;Users&#x2F;alexey&#x2F;dev&#x2F;git&#x2F;.&#x2F;app-1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;sbt-revolver&quot;&gt;SBT Revolver&lt;&#x2F;h2&gt;
&lt;p&gt;It is simple plugin to be added in a Scala project. However, Giter8 is not necessarily to be added in your project, only when you
develop new template and want to keep it in the GitHub repo. Revolver plugin can be added to project as any other user plugin via project&#x2F;plugins.sbt file.
Adding its definition to that file:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;addSbtPlugin(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;io.spray&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;sbt-revolver&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; % “x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;z&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Change x.y.z to latest version from its GitHub repository. &lt;&#x2F;p&gt;
&lt;p&gt;Main feature of sbt-reolver is &amp;quot;triggered execution&amp;quot; upon project file modification. 
It helps to restart your application automatically and may remind
you dynamic-language experience where developers test their modules by refreshing a browser page or by calling their scripts again.&lt;&#x2F;p&gt;
&lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;novakov-alexey.github.io&amp;#x2F;processed_images&amp;#x2F;d9cf78e52b03ff9a00.png&quot; class=&quot;center-image&quot;&#x2F;&gt;
&lt;br&#x2F;&gt;&lt;br&#x2F;&gt;
&lt;p&gt;In summary, &lt;em&gt;it enables a super-fast development turnaround for your Scala applications&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;SBT Reolver starts your application in forked JVM, that helps to easily pass JVM options and restart it again upon triggered execution.&lt;&#x2F;p&gt;
&lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;novakov-alexey.github.io&amp;#x2F;processed_images&amp;#x2F;1182f2721aaafd8a00.png&quot; class=&quot;center-image&quot;&#x2F;&gt;
&lt;br&#x2F;&gt;&lt;br&#x2F;&gt;
&lt;p&gt;&lt;em&gt;MainExchange&lt;&#x2F;em&gt; is my Scala application started by sbt-revolver as separate JVM process.&lt;&#x2F;p&gt;
&lt;p&gt;Revolver has its own configuration to control JVM options, environment variables, etc.&lt;&#x2F;p&gt;
&lt;p&gt;JVM options example:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;javaOptions in reStart += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;-Xmx2g&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Set your main class. It is useful when you have more than one:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;mainClass in reStart := &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;com.example.Main&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Enable debug of the forked JVM process:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Revolver&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;enableDebugging(port &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;5050&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; suspend &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Export environment variables for your Scala application:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;envVars in reStart := &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(“&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;K8S_NAMESPACE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; -&amp;gt; “test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Below is an example of starting an application via sbt-revolver:&lt;&#x2F;p&gt;
&lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;novakov-alexey.github.io&amp;#x2F;processed_images&amp;#x2F;6e045aee4425a35100.png&quot; class=&quot;center-image&quot;&#x2F;&gt;
&lt;br&#x2F;&gt;&lt;br&#x2F;&gt;
&lt;p&gt;MainExchange is Akka-HTTP based application running HTTP server. Now let us change some line of code in the code base.
Once we done that, sbt-revolver immediately triggers compilation, stop running process and starts new one:&lt;&#x2F;p&gt;
&lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;novakov-alexey.github.io&amp;#x2F;processed_images&amp;#x2F;ec35aa80c157a52a00.png&quot; class=&quot;center-image&quot;&#x2F;&gt;
&lt;br&#x2F;&gt;&lt;br&#x2F;&gt;
&lt;p&gt;There are 3 things happened:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Build triggered (compilation)&lt;&#x2F;li&gt;
&lt;li&gt;Stop running application&lt;&#x2F;li&gt;
&lt;li&gt;Start new application&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;code&gt;restart&lt;&#x2F;code&gt; revolver SBT task is leveraging SBT triggered execution which is enabled by tilde &lt;em&gt;~&lt;&#x2F;em&gt; in front the task name,
when running it in SBT shell.&lt;&#x2F;p&gt;
&lt;p&gt;There are other useful commands to be combined with ~ to trigger some task upon files modification:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; runs failed tests, if any
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; testQuick

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; runs specific test
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; testOnly org.alexeyn.SomeTest

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; runs all tests
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; test

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; cleans compiled sources and runs all tests
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; clean&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;test
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;sbt-tpolecat&quot;&gt;SBT Tpolecat&lt;&#x2F;h2&gt;
&lt;p&gt;Enables Scala compiler options as per recommendations of Rob Norris &lt;a href=&quot;https:&#x2F;&#x2F;tpolecat.github.io&#x2F;2017&#x2F;04&#x2F;25&#x2F;scalac-flags.html&quot;&gt;blog-post&lt;&#x2F;a&gt;. Plugin enables as many Scala compiler options as possible to enforce type safety and
discourage bad practises in the code base by turning warnings into compiler errors.&lt;&#x2F;p&gt;
&lt;p&gt;Add plugin to your project:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;addSbtPlugin(“io&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;github&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;davidgregory084&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;sbt-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;tpolecat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; % “0.1.10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Actually, the same compiler options can be enabled manually within the SBT definition. However, it is more convenient to
enable this plugin once and forget about adding anything manually. One can also disable particular options enabled by this
plugin, in case that option does not make sense for particular project.&lt;&#x2F;p&gt;
&lt;p&gt;Some of the options which are enabled by this plugin:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;scalacOptions ++= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Seq&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;-deprecation&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,               
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;-encoding&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;utf-8&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,         
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;-explaintypes&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,                  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;-language:higherKinds&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,          
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;-language:implicitConversions&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;-unchecked&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,                       
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;-Xfatal-warnings&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,            
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;-Xlint:infer-any&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,                 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;-Ywarn-dead-code&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,              
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;-Ywarn-extra-implicit&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,        
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;-Ywarn-inaccessible&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,          
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;-Ywarn-infer-any&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,            
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;-Ywarn-numeric-widen&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,       
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;-Ywarn-unused:implicits&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,   
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;-Ywarn-unused:imports&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,     
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;-Ywarn-unused:locals&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,     
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;-Ywarn-unused:params&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,     
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;-Ywarn-unused:patvars&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,    
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;-Ywarn-unused:privates&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,   
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;-Ywarn-value-discard&amp;quot;     
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;…    
)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Last time I checked this plugin it enables 54 scalac options. I recommend to use this plugin by default in every project, it will
make your code base much more robust.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;sbt-native-packager&quot;&gt;SBT Native Packager&lt;&#x2F;h2&gt;
&lt;p&gt;To enbale in your project:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;addSbtPlugin(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;com.typesafe.sbt&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; %% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;sbt-native-packager&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; % “x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;z&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Native Packager allows to package your application in different formats such as:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;universal zip, tar.gz, xz archives&lt;&#x2F;li&gt;
&lt;li&gt;deb and rpm packages&lt;&#x2F;li&gt;
&lt;li&gt;dmg &lt;&#x2F;li&gt;
&lt;li&gt;msi &lt;&#x2F;li&gt;
&lt;li&gt;Docker&lt;&#x2F;li&gt;
&lt;li&gt;GraalVM native images&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Native packager is not auto-plugin, i.e. it is not enabled by default. In order to use it for some of
your module, you need to enable it in SBT definition:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;lazy val root = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(project in file(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;.&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;  settings(
    name := &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;exchange&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;    …&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;    dockerBaseImage := “openjdk:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;-jre-alpine”&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;    dockerExposedPorts ++= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Seq&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;8080&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;    dockerRepository := &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(“&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;alexeyn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
  ).enablePlugins(AshScriptPlugin) 
                          &#x2F;&#x2F; or other options - DockerPlugin, JavaAppPackaging
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This plugins comes with different types of packaging format, which you can choose when enabling it for some SBT module.
In the example above, we enable Java packaging format with Ash shell compatible executable script, so that we can run a JAR file
in Alpine Linux. Basically, JavaAppPackaging is a base format. It creats a couple of scripts to start JVM with a long list 
of JAR files in the CLASSPATH variable. It also puts all required dependencies into the &lt;code&gt;lib&lt;&#x2F;code&gt; folder, 
which is referenced from that automatically generated shell script. &lt;&#x2F;p&gt;
&lt;h3 id=&quot;java-packaging-format&quot;&gt;Java Packaging Format&lt;&#x2F;h3&gt;
&lt;p&gt;Below an example of such SBT task. It builds a universal ZIP archive:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;sbt universal:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;packageBin
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;it will create a ZIP archive with a file structure shown below:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;&#x2F;dev&#x2F;git&#x2F;exchange&#x2F;target&#x2F;universal&#x2F;exchange-0.1.1-SNAPSHOT.zip

tree&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; -L 2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; bin
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;   ├── exchange
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;   └── exchange.bat
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;└──&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; lib
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; ch.qos.logback.logback-classic-1.2.3.jar
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; ch.qos.logback.logback-core-1.2.3.jar
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; com.chuusai.shapeless_2.13-2.3.3.jar
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; com.example.exchange-0.1.1-SNAPSHOT.jar
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; com.google.protobuf.protobuf-java-3.10.0.jar
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; com.typesafe.akka.akka-actor_2.13-2.6.1.jar
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; com.typesafe.akka.akka-http-core_2.13-10.1.11.jar
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; com.typesafe.akka.akka-http_2.13-10.1.11.jar
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; com.typesafe.akka.akka-parsing_2.13-10.1.11.jar
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; com.typesafe.akka.akka-protobuf-v3_2.13-2.6.1.jar
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; com.typesafe.akka.akka-stream_2.13-2.6.1.jar
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; com.typesafe.config-1.4.0.jar
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; com.typesafe.scala-logging.scala-logging_2.13-3.9.2.jar
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; com.typesafe.ssl-config-core_2.13-0.4.1.jar
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; de.heikoseeberger.akka-http-circe_2.13-1.30.0.jar
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; io.circe.circe-core_2.13-0.12.3.jar
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; io.circe.circe-generic_2.13-0.12.3.jar
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; io.circe.circe-jawn_2.13-0.12.3.jar
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; io.circe.circe-numbers_2.13-0.12.3.jar
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; io.circe.circe-parser_2.13-0.12.3.jar
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; org.reactivestreams.reactive-streams-1.0.3.jar
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; org.scala-lang.modules.scala-java8-compat_2.13-0.9.0.jar
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; org.scala-lang.modules.scala-parser-combinators_2.13-1.1.2.jar
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; org.scala-lang.scala-library-2.13.1.jar
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; org.scala-lang.scala-reflect-2.13.1.jar
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; org.slf4j.slf4j-api-1.7.26.jar
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; org.typelevel.cats-core_2.13-2.0.0.jar
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; org.typelevel.cats-kernel_2.13-2.0.0.jar
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; org.typelevel.cats-macros_2.13-2.0.0.jar
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;└──&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; org.typelevel.jawn-parser_2.13-0.14.2.jar

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; directories, 32 files
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;em&gt;bin&#x2F;exchange&lt;&#x2F;em&gt; is a shell script to run your Scala application Main class.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;docker-image-format&quot;&gt;Docker Image format&lt;&#x2F;h3&gt;
&lt;p&gt;SBT task to create a Dockerfile and the same file structure as for Java packaging format:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;sbt docker:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;stage
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &#x2F;Users&#x2F;alexey&#x2F;dev&#x2F;git&#x2F;exchange&#x2F;target&#x2F;docker
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;tree&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; -L 5
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;.
└──&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; stage
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; Dockerfile
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;└──&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; opt
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;└──&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; docker
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; bin
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;   ├── exchange
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;   └── exchange.bat
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;└──&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; lib
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; ch.qos.logback.logback-classic-1.2.3.jar
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; ch.qos.logback.logback-core-1.2.3.jar
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; com.chuusai.shapeless_2.13-2.3.3.jar
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; com.example.exchange-0.1.1-SNAPSHOT.jar
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In order to build an image and publish it to a container registry:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;sbt docker:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;publish
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can also customise Dockerfile, which is by default generated automatically. 
Default docker file content can be be seen via:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;sbt&amp;gt; show dockerCommands

[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;info&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Cmd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;WrappedArray&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(openjdk:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; as&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; stage0))
[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;info&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Cmd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;LABEL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;WrappedArray&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(snp-multi-stage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;intermediate&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;))
[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;info&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Cmd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;LABEL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;WrappedArray&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(snp-multi-stage-id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;b8437d6f-af0a-459c-ae51-cd3b9c5b7404&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;))
[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;info&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Cmd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;WORKDIR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;WrappedArray&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&#x2F;opt&#x2F;docker))
[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;info&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Cmd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;COPY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;WrappedArray&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(opt &#x2F;opt))
[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;info&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Cmd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;USER&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;WrappedArray&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(root))
[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;info&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ExecCmd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;RUN&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(chmod&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;R&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; u&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;rX&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;rX&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &#x2F;opt&#x2F;docker))
[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;info&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ExecCmd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;RUN&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(chmod&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; u+x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;g+x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &#x2F;opt&#x2F;docker&#x2F;bin&#x2F;exchange))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In order to customize Dockerfile content you can set your sequence of Dockerfile commands:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;dockerCommands := &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Seq&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Cmd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;FROM&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;openjdk:8&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Cmd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;LABEL&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&amp;quot;&amp;quot;MAINTAINER=&amp;quot;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;maintainer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;}&amp;quot;&amp;quot;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ExecCmd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;CMD&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;echo&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;Hello, World from Docker&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Sometimes I use only Java packaging part of this plugin and build Docker image directly via &lt;code&gt;docker build&lt;&#x2F;code&gt; command
to avoid new SBT start. It is usually done, when image build is designed as separate step in CI pipeline.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;sbt-release&quot;&gt;SBT Release&lt;&#x2F;h2&gt;
&lt;p&gt;SBT Release provides customisable release process. It helps to manage your project version, publish project artefacts to configured 
repository. &lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;addSbtPlugin(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;com.github.gseitz&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;sbt-release&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; % “&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;12&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Typical Scala project release process may include:&lt;&#x2F;p&gt;
&lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;novakov-alexey.github.io&amp;#x2F;processed_images&amp;#x2F;62194d412004728000.png&quot; class=&quot;center-image&quot;&#x2F;&gt;
&lt;br&#x2F;&gt;&lt;br&#x2F;&gt;
&lt;p&gt;You can script all typical tasks to perform version increase, creating Git tag, building an image, publishing
a JAR file to central artefact repository, etc. SBT Release gives a list of predefined tasks, which we
can use as is or customise to fulfil project needs.&lt;&#x2F;p&gt;
&lt;p&gt;Default list of release steps is:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;releaseProcess := &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Seq&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ReleaseStep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](
    checkSnapshotDependencies&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;    inquireVersions&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;    runTest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;    setReleaseVersion&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;    commitReleaseVersion&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;    tagRelease&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;    publishArtifacts&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;    inquireVersions&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;    setNextVersion&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;    commitNextVersion&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;    pushChanges  
)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Default list can be good enough for typical Scala project. You do not need to define it in SBT build file if you are fine
with it.&lt;&#x2F;p&gt;
&lt;p&gt;In order to run SBT tasks to release with default steps, one can run:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;sbt &amp;#39;release with-defaults&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Some of the steps are responsible for project version management. Project version is usually located in project root folder and named
as version.sbt file. &lt;&#x2F;p&gt;
&lt;p&gt;In case we have such version in the file: &lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;version in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ThisBuild&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; := &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;0.1.1-SNAPSHOT&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;then&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;inquireVersions step will read it &lt;&#x2F;li&gt;
&lt;li&gt;setReleaseVersion step will make as release version&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;version in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ThisBuild&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; := “&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;setNextVersion step will switch release version to next snapshot version&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;version in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ThisBuild&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; := “&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;SNAPSHOT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Version increment can be customised, so that you can control which number is incremented: patch, minor or major version.&lt;&#x2F;p&gt;
&lt;p&gt;There are steps to commit and push changes, typically placed at the end of the process. 
If we look at Git log after release is executed, then we will see that sbt-release is making a couple of commits to reflect
the release process in Git commit history.&lt;&#x2F;p&gt;
&lt;p&gt;Latest message on top:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;commit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 99b1094dce14bf99b6f38a8ff9870edaf7c728d3 (HEAD -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; master, origin&#x2F;master)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;Date:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;   Fri Feb 7 09:20:03 2020 +0100

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;Setting&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; version to 0.1.2-SNAPSHOT

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;commit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; cb9ec293a11a5f6d989c936b18922d3f3ec40bcd (tag: v0.2.2)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;Date:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;   Fri Feb 7 09:16:59 2020 +0100

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;Setting&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; version to 0.1.1

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;commit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; 63abea7141901419ad732d354dc703f884e53010
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;Merge:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; b180810 a1c0c14
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;Date:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;   Fri Feb 7 08:57:00 2020 +0100

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;Merge&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; pull request &lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;#35 from novakov-alexey&#x2F;add-cookier-attributes
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;    add string property attributes to put user defined parameters into th…
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;other-useful-plugins&quot;&gt;Other useful plugins&lt;&#x2F;h2&gt;
&lt;p&gt;There are many other useful plugins I usually use from project to project:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;sbt-updates&lt;&#x2F;em&gt; to report newest versions of the libraries inlucluded in your project.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;em&gt;sbt-scalafmt&lt;&#x2F;em&gt; to format Scala code.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;em&gt;sbt-mdoc&lt;&#x2F;em&gt; to compile Scala code snippets in the Markdown documentation. Useful for own Scala libraries.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;em&gt;sbt-scoverage&lt;&#x2F;em&gt; to report test coverage in the project.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;&#x2F;h2&gt;
&lt;p&gt;SBT has become quite mature build tool. It offers good variety of plugins for every day life of Scala developer.
If you cannot find specific SBT plugin that fits your requirements, you can try to implement it using SBT Tasks and Plugin API. 
Then it could be published as open source project. This is how many SBT plugins were born.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Monads in Scala</title>
		<published>2020-03-28T00:00:00+00:00</published>
		<updated>2020-03-28T00:00:00+00:00</updated>
		<link href="https://novakov-alexey.github.io/scala-monads/" type="text/html"/>
		<id>https://novakov-alexey.github.io/scala-monads/</id>
		<content type="html">&lt;p&gt;Once you start dig deeper into Scala and its suitability for functional programming, you meet Monads. In this blog post, we will explore Monads in Scala:
their usage and usefulness. &lt;&#x2F;p&gt;
&lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;novakov-alexey.github.io&amp;#x2F;processed_images&amp;#x2F;d3136219c398771400.png&quot; class=&quot;center-image&quot;&#x2F;&gt;
&lt;br&#x2F;&gt;&lt;br&#x2F;&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;what-is-monad&quot;&gt;What is Monad?&lt;&#x2F;h2&gt;
&lt;p&gt;You have probably already heard this quote:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
  A monad is just a monoid in the category of endofunctors&lt;br &#x2F;&gt;
  
  -- Saunders Mac Lane
  
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;3870310&#x2F;6176274&quot;&gt;More details on StackOverflow answer&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Well, that does not bring much help. Obviously, Monad is not just Scala pattern, but it is something what is coming 
from &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Category_theory&quot;&gt;Category Theory&lt;&#x2F;a&gt;. 
However, we are not going to touch Category Theory in general, but let&#x27;s say that Monad definition is coming from abstract theory of Mathematics.&lt;&#x2F;p&gt;
&lt;p&gt;I like another definition of Monad, which is given in the  book &amp;quot;Functional Programming in Scala&amp;quot;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
  Monad is an abstract interface&lt;br &#x2F;&gt;
  
  -- Chiusano, Bjarnason
  
&lt;&#x2F;blockquote&gt;
&lt;p&gt;It is more clear for programmers. Before we clarify in details what Monad is, let us look at some examples of Mondas in Scala standard library.
This might already click for you that Monad is not something from aliens:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Option&lt;&#x2F;li&gt;
&lt;li&gt;Either&lt;&#x2F;li&gt;
&lt;li&gt;List&lt;&#x2F;li&gt;
&lt;li&gt;Future&lt;&#x2F;li&gt;
&lt;li&gt;Map&lt;&#x2F;li&gt;
&lt;li&gt;Set&lt;&#x2F;li&gt;
&lt;li&gt;Stream&lt;&#x2F;li&gt;
&lt;li&gt;Vector&lt;&#x2F;li&gt;
&lt;li&gt;Try &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;... and others&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-makes-thing-a-monad&quot;&gt;What makes thing a Monad?&lt;&#x2F;h2&gt;
&lt;p&gt;There are several minimum combinations of functions which make some type a Monad. One of the popular minimum set is two functions:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;flatMap&lt;&#x2F;strong&gt; - also known as &lt;code&gt;bind&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;unit&lt;&#x2F;strong&gt; - also known as &lt;code&gt;pure&lt;&#x2F;code&gt; in &lt;a href=&quot;https:&#x2F;&#x2F;typelevel.org&#x2F;cats&#x2F;typeclasses&#x2F;monad.html#monad-instances&quot;&gt;Cats library&lt;&#x2F;a&gt; or &lt;code&gt;apply&lt;&#x2F;code&gt; in pure Scala&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;These two functions implemented for some type bring powerful abstraction to write complex programs easy.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;make-your-monad&quot;&gt;Make your Monad&lt;&#x2F;h2&gt;
&lt;p&gt;Monad sometimes reminds a container to work with its values using special interface. If we model Monad ourselves, then it may look like a box with a thing
inside, which we access using &lt;code&gt;flatMap&lt;&#x2F;code&gt; and one more useful function &lt;code&gt;map&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt; Box&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](v: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;) { 

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;flatMap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](f: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; f(v)
  
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](f: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; flatMap(a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt; new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(f(a)))
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;map&lt;&#x2F;strong&gt; - is implemented in terms of &lt;code&gt;flatMap&lt;&#x2F;code&gt; + &lt;code&gt;unit&lt;&#x2F;code&gt; (i.e. Box class constructor). 
So we can implement &lt;code&gt;map&lt;&#x2F;code&gt; for any kind of Monads, as we will see that later.&lt;&#x2F;p&gt;
&lt;p&gt;Now let&#x27;s use &lt;code&gt;Box &lt;&#x2F;code&gt; Monad to show some usage example:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;scala&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
res2: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;scala&amp;gt; res2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
res3: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;2

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;scala&amp;gt; res3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;flatMap(i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt; new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; + i))
res5: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;3
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;Box&lt;&#x2F;code&gt; contains single integer value and allows us to manipulate it without leaving &lt;code&gt;Box&lt;&#x2F;code&gt; context, i.e. our result is always a &lt;code&gt;Box[T]&lt;&#x2F;code&gt;.
We can also make variable &lt;code&gt;v&lt;&#x2F;code&gt; as public and read it when needed. &lt;code&gt;Box&lt;&#x2F;code&gt; behaves similarly to non-empty single element list.
It is hard to say when this particular &lt;code&gt;Box&lt;&#x2F;code&gt; Monad will be useful looking at above example. However, it should give you an idea how Monad implementation may look like.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;scala-examples&quot;&gt;Scala Examples&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;List&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;List operates on collection of values. &lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;scala&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val l = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; &amp;lt;-- unit
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;l: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)

scala&amp;gt; l&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
res0: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)

scala&amp;gt; l&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;flatMap(i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(i + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;))
res1: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Option&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Option has two sub-types: &lt;code&gt;Some&lt;&#x2F;code&gt; and &lt;code&gt;None&lt;&#x2F;code&gt;. &lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Some&lt;&#x2F;code&gt; is like non-empty single element list, similar to Box Monad example above.
&lt;code&gt;None&lt;&#x2F;code&gt; ignores application of lambda function in &lt;code&gt;flatMap&lt;&#x2F;code&gt; or &lt;code&gt;map&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val isOn = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; &amp;lt;-- unit
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val isBlack = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;None &lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; &amp;lt;-- unit without any argument

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;makeCoffee&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)

scala&amp;gt; isOn
         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;flatMap(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;_ =&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; isBlack
         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;flatMap(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;_ =&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; makeCoffee))

res0: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;None
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Example above won&#x27;t return value of &lt;code&gt;isOn&lt;&#x2F;code&gt; variable because the first &lt;code&gt;flatMap&lt;&#x2F;code&gt; call returns &lt;code&gt;None&lt;&#x2F;code&gt; because of &lt;code&gt;isBlack&lt;&#x2F;code&gt;, so that second &lt;code&gt;flatMap&lt;&#x2F;code&gt; even won&#x27;t be called.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;generic-monad&quot;&gt;Generic Monad&lt;&#x2F;h2&gt;
&lt;p&gt;We have already seen example of at least 3 Monads above. In order to detach definition of Monad from its concrete implementation like
List or Option, let us define abstract Monad interface using Scala high-order types feature:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt; Monad&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]] extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Functor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;unit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](a: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;flatMap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](ma: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;])(f: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](ma: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;])(f: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;      flatMap(ma)(a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; unit(f(a))) 
  }

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt; Functor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]] {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](fa: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;])(f: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]
  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Functor is one more abstraction which is more simpler than Monad. It requires only &lt;code&gt;map&lt;&#x2F;code&gt; implementation. We can say that every Monad also a Functor. 
Functor is also coming from the Category Theory. I decided to mention it here, because you will frequently find it in the context of Monads,
when learning functional programming in general. Abstract Monad interface can also implement map in terms of &lt;code&gt;flatMap&lt;&#x2F;code&gt; and &lt;code&gt;unit&lt;&#x2F;code&gt; functions, 
so that &lt;code&gt;map&lt;&#x2F;code&gt; is implemented automatically for any concrete implementation of some Monad.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;function-application-in-flatmap&quot;&gt;Function application in flatMap&lt;&#x2F;h2&gt;
&lt;p&gt;An application of &lt;code&gt;f&lt;&#x2F;code&gt; function in &lt;code&gt;flatMap&lt;&#x2F;code&gt; and &lt;code&gt;map&lt;&#x2F;code&gt; depends on the concrete Monad instance. In one case the lambda
function we pass to the &lt;code&gt;flatMap&lt;&#x2F;code&gt; is always executed, in another cases not. Examples:&lt;&#x2F;p&gt;
&lt;p&gt;&amp;quot;f&amp;quot; applied when:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Option[A]: is Some(A)&lt;&#x2F;li&gt;
&lt;li&gt;Either[A, B]: is Right(B)&lt;&#x2F;li&gt;
&lt;li&gt;List[A]: is non-empty&lt;&#x2F;li&gt;
&lt;li&gt;Future[A]: is ready&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Even though &lt;code&gt;flatMap&lt;&#x2F;code&gt; behaves differently on concrete Monad instance, there is still great benefits to use them in any ordinary program.
In order to classify some type as a Monad, it needs to comply with &lt;strong&gt;Monad Laws&lt;&#x2F;strong&gt; and that is closing the definition of Monads. Let&#x27;s look 
at Monad laws before we move further to practical examples.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;monad-laws&quot;&gt;Monad Laws&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;1-identity&quot;&gt;1. Identity&lt;&#x2F;h3&gt;
&lt;p&gt;Result of a function which creates Monad instance using &lt;code&gt;unit&lt;&#x2F;code&gt; is equal to application of this function over already created Monad instance.&lt;&#x2F;p&gt;
&lt;p&gt;Example:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(x: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(x)

scala&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;flatMap(f) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; f(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
res0: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Boolean = true

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;scala&amp;gt; f(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;flatMap(f)
res1: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Boolean = true
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Abstract definition of Identity Law:&lt;&#x2F;p&gt;
&lt;h4 id=&quot;1-1-left-identity&quot;&gt;1.1 Left identity&lt;&#x2F;h4&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](x: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Monad&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; unit(x)

flatMap(unit(x))(f) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; f(x) 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h4 id=&quot;1-2-right-identity&quot;&gt;1.2 Right identity&lt;&#x2F;h4&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;f(x) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; flatMap(unit(x))(f)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;2-associative&quot;&gt;2. Associative&lt;&#x2F;h3&gt;
&lt;p&gt;Application of &lt;code&gt;f1&lt;&#x2F;code&gt; and &lt;code&gt;f2&lt;&#x2F;code&gt; functions one after another yields the same result as applying them within the first &lt;code&gt;flatMap&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Example:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;f1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(a: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(a + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;f2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(a: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(a * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)

scala&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;flatMap(f1)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;flatMap(f2)
res0: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)

scala&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;flatMap(a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; f1(a)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;flatMap(f2))
res1: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Abstract definition:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;f1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](a: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Monad&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;f2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](a: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Monad&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; x is a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Monad&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; instance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;flatMap(flatMap(x)(f1))(f2) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; flatMap(x)(a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; flatMap(f1(a))(f2))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;functor-laws&quot;&gt;Functor Laws&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;1-identity-1&quot;&gt;1. Identity&lt;&#x2F;h3&gt;
&lt;p&gt;Example:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;))(a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; a) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Abstract definition:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;map(x)(a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; a) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; x  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; the same value returned
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;2-associative-1&quot;&gt;2. Associative&lt;&#x2F;h3&gt;
&lt;p&gt;Example:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val f1 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(n: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; n + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val f2 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(n: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; n * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;2

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;map(map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;))(f1))(f2) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; Some(4)
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;== 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;))(f2 compose f1) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; Some(4)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Standard Scala function &lt;code&gt;compose&lt;&#x2F;code&gt; return a function which applies f1 and then f2 taking the result of the first f1 function.&lt;&#x2F;p&gt;
&lt;p&gt;Abstract definition:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;map(map(x)(f1))(f2) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; map(x)(f2 compose f1) 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;application-of-monads&quot;&gt;Application of Monads&lt;&#x2F;h2&gt;
&lt;p&gt;Using Monads we can do sequential composition. If we have several values in form of Option, we can sequence them into logic program,
which evaluates next value based on the &lt;code&gt;flatMap&lt;&#x2F;code&gt; behaviour of the previous value. &lt;&#x2F;p&gt;
&lt;h3 id=&quot;compose-option&quot;&gt;Compose Option&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt; Coffee&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(name: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val isOn = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val coffeeName = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;black&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val makeCoffee = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(name: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Coffee&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(name))

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;{
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;_ &amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; isOn
  name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; coffeeName
  coffee &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; makeCoffee(name)
} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;yield&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; coffee

scala&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Coffee&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Coffee&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(black))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Final result of this program is Some(..) value. However, it could result into None, if one these three values is None.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;compose-either&quot;&gt;Compose Either&lt;&#x2F;h3&gt;
&lt;p&gt;The following three functions return Either Monad, so that we can compose them into a sequence.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt; Cluster&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(pods: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;validateNamespace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(ns: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Either&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Right&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;clusterExists&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(ns: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Either&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Cluster&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Right&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;createCluster&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(ns: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;cluster: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Cluster&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Either&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Cluster&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= 
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Right&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Cluster&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(cluster&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;pods))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can compose them in same manner as we have done with &lt;strong&gt;Option&lt;&#x2F;strong&gt; example above:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val ns = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;my-cluster&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;{
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;_ &amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; validateNamespace(ns)
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;_ &amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; clusterExists(ns)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;left&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;map(c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt; 
           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;Cluster with ${c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;pods} pods already exists&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
   newCluster &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; createCluster(ns&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Cluster&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;))
} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;yield&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; newCluster
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;From business logic perspective we want to create some hypothetical cluster if namespace is valid and cluster for the given namespace does not exist. 
We implemented errors as &lt;code&gt;Either.Left&lt;&#x2F;code&gt; and normal result as &lt;code&gt;Either.Right&lt;&#x2F;code&gt;. Interface like &lt;code&gt;Either&lt;&#x2F;code&gt; is a popular approach not only in Scala to have some sort of result wrapper
for normal and error results.&lt;&#x2F;p&gt;
&lt;p&gt;Final result value is based on the return values we hardcoded in the given functions:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;scala&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Either&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Cluster&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Right&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Cluster&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Benefits of using Monads is that we do not need to use &lt;code&gt;if&#x2F;else&lt;&#x2F;code&gt; control flow, since we have Monads Laws working when we compose Monad instances.&lt;&#x2F;p&gt;
&lt;p&gt;In case some of the given function returns &lt;code&gt;Either.Left&lt;&#x2F;code&gt;, for example:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;validNamespace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(ns: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Either&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= 
   if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(ns &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;my-cluster&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;) 
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Left&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(
     “&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Cluster&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; namespace is not valid name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; choose another name”
   ) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Right&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then it turns the whole result of the composition into error state, i.e. into &lt;code&gt;Either.Left&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;scala&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Either&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Cluster&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Left&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(
              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Cluster&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; namespace is not valid name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; choose another name
            )
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;for-comprehension&quot;&gt;For comprehension&lt;&#x2F;h2&gt;
&lt;p&gt;Scala offers special syntax for the sequence of nested &lt;code&gt;flatMap&lt;&#x2F;code&gt; calls and one &lt;code&gt;map&lt;&#x2F;code&gt; at the end, which is called &amp;quot;for-comprehension&amp;quot;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;for {…} yield&lt;&#x2F;strong&gt; is a syntactic sugar for a sequence of calls:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;flatMap1(… + flatMapN(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; + map(…)))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Desugared version&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p&gt;Behind the scene, Scala compiler desugars the &lt;code&gt;for-comprehension&lt;&#x2F;code&gt; into the following code:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;validNamespace(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;my-cluster&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;flatMap(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;_ =&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;     clusterExists(ns)
       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;left
       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;map(c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;Cluster with ${c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;pods} pods already exists&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;flatMap(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;_ =&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;            createCluster(ns&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Cluster&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;))
               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;map(newCluster &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; newCluster)
        )
  )
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Sugared version of the same code snippet&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;{
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;_ &amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; validNamespace(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;my-cluster&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;_ &amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; clusterExists(ns)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;left&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;map(c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt; 
          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;Cluster with ${c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;pods} pods already exists&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
  newCluster &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; createCluster(ns&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Cluster&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;))
} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;yield&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; newCluster
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For-comprehension of this program is much more readable and thus recommended to be used when composing monadic values in particular programs.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;caveat-with-monads&quot;&gt;Caveat with Monads&lt;&#x2F;h2&gt;
&lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;novakov-alexey.github.io&amp;#x2F;processed_images&amp;#x2F;e47a61eff995083d00.png&quot; class=&quot;center-image&quot;&#x2F;&gt;
&lt;br&#x2F;&gt;&lt;br&#x2F;&gt;
&lt;p&gt;We can easily compose Monads of the same types, like we have seen in examples, all values were options or eithers and so on. 
However, it is not straightforward to compose different Monad stacks, like Option and Either values in one sequence.
Let&#x27;s look at the example of such problem below.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;problem&quot;&gt;Problem&lt;&#x2F;h3&gt;
&lt;p&gt;Let&#x27;s make one of the value in the &lt;code&gt;for-comprehension&lt;&#x2F;code&gt; to be different type, so that we will try to compose different Monads:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;validateNamespace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(ns: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;): 
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Either&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;clusterExists&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(ns: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;): 
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Either&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Cluster&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F;Attention &amp;lt;-- two Monad layers

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;createCluster&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(ns: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;cluster: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Cluster&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;): 
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Either&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Cluster&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If we try to compile below code:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;{
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;_ &amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; validateNamespace(ns)
  cluster &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; clusterExists(ns)
  updated &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; createCluster(ns&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; cluster)
} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;yield&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;  updated
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is going to end up in compiler errors:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;updated &amp;lt;- createCluster(ns&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; cluster)
                             ^
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&amp;lt;pastie&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;:4: error: type mismatch;
 found   : Either[String,Cluster]
 required: Cluster

    cluster &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#d8dee9;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;- clusterExists(ns)
            ^
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&amp;lt;pastie&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;:3: error: type mismatch;
 found   : Option[Nothing]
 required: scala.util.Either[?,?]
Option[Nothing] &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#d8dee9;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;: scala.util.Either[?,?]?
false
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;First Monadic value rules them all&lt;&#x2F;strong&gt;. &lt;&#x2F;p&gt;
&lt;p&gt;Once we put first value such as &lt;code&gt;validateNamespace&lt;&#x2F;code&gt;, which returns &lt;code&gt;Either[_, _]&lt;&#x2F;code&gt;, it starts
to drive the return type of the &lt;code&gt;flatMap&lt;&#x2F;code&gt; function. Second nested value is not &lt;code&gt;Either&lt;&#x2F;code&gt; type, but &lt;code&gt;Option[_]&lt;&#x2F;code&gt;. Here it starts to brake
the Monad interface and eventually won&#x27;t let it compile the code. What we need is to align monadic values to common ground.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;monad-transformer&quot;&gt;Monad Transformer&lt;&#x2F;h2&gt;
&lt;p&gt;In order to compose different Monad types, we can use one more pattern called &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Monad_transformer&quot;&gt;Monad Transformer&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Monad Transformer is a custom-written Monad designed specifically for composition. Of course we could tackle above problem
by unboxing Option, then checking what is in the Either, return Either again to make &lt;code&gt;for-comprehension&lt;&#x2F;code&gt; to be compiled. However, 
this would be clumsy and not scalable solution in terms of code maintenance. Monad Transformers example:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;OptionT&lt;&#x2F;code&gt; to compose &lt;code&gt;Option&lt;&#x2F;code&gt; + Any other Monad&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;EitherT&lt;&#x2F;code&gt; to compose &lt;code&gt;Either&lt;&#x2F;code&gt; + Any other Monad&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;ReaderT&lt;&#x2F;code&gt; to compose &lt;code&gt;Reader&lt;&#x2F;code&gt; + Any other Monad&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;WriterT&lt;&#x2F;code&gt; to compose &lt;code&gt;Writer&lt;&#x2F;code&gt; + Any other Monad&lt;&#x2F;li&gt;
&lt;li&gt;... others&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;If we want to compose Option Monad with other monadic values of type &lt;code&gt;Either&lt;&#x2F;code&gt;, then we need to use &lt;code&gt;EitherT&lt;&#x2F;code&gt; monad for &lt;code&gt;Option&lt;&#x2F;code&gt;.
&lt;code&gt;EitherT&lt;&#x2F;code&gt; instance knows how to unbox and box &lt;code&gt;Option&lt;&#x2F;code&gt; to operate on nested &lt;code&gt;Either&lt;&#x2F;code&gt; and thus guide the &lt;code&gt;flatMap&lt;&#x2F;code&gt; function.&lt;&#x2F;p&gt;
&lt;p&gt;Let us look at &lt;code&gt;EitherT&lt;&#x2F;code&gt; example implementation taken from Cats library:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; takes 3 type parameters: 
&#x2F;&#x2F; 1. high-order type of the outer Monad 
&#x2F;&#x2F; 2. left type of Either
&#x2F;&#x2F; 3. right type of Either
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt; EitherT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](value: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Either&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]]) {

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;flatMap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;AA &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&amp;gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](f: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;EitherT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;AA&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;])(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;implicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;F: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Monad&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;])
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;   : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;EitherT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;AA&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; Attention: there is one more &amp;quot;flatMap&amp;quot; to unwrap first Monad layer,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; which is F[_] 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;EitherT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;flatMap(value) { 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;l &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;@ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Left&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;pure(l&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;rightCast)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Right&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(b)    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; f(b)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;value
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;   })
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;See inline comments above. One more important point is that we expect an implicit Monad instance for that outer Monad 
&lt;code&gt;F[_]&lt;&#x2F;code&gt;. We use it to unwrap first Monad, by convention this variable is also named &lt;code&gt;F&lt;&#x2F;code&gt;. 
So Monad Transformer does not do any magic, but it is just a type constructor, which returns a Monad as result. &lt;&#x2F;p&gt;
&lt;h3 id=&quot;apply-monad-transformer&quot;&gt;Apply Monad Transformer&lt;&#x2F;h3&gt;
&lt;p&gt;Now let us use the same example and define return values:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt; Cluster&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(pods: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;updated: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Long&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;validateNamespace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(ns: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Either&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= 
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Right&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;clusterExists&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(ns: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Either&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Cluster&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Right&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Cluster&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;currentTimeMillis())))

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;updateCluster&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(ns: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;cluster: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Cluster&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;): 
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Either&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Cluster&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Right&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Cluster&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(cluster&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;pods&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;currentTimeMillis()))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We are going to use &lt;code&gt;EitherT&lt;&#x2F;code&gt; instance from &lt;a href=&quot;https:&#x2F;&#x2F;typelevel.org&#x2F;cats&#x2F;datatypes&#x2F;eithert.html&quot;&gt;Cats&lt;&#x2F;a&gt; library.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; cats&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;implicits&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;._
import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; cats&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;EitherT

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val cluster = for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;_ &amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; validateNamespace(ns)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;toEitherT[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]
    cluster&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;EitherT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(clusterExists(ns))
    updated &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; updateCluster(ns&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; cluster)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;toEitherT[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]
} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;yield&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;  updated
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Since we introduced Monad transformer into composition, we have to use it for all the monadic values in the same sequence of flatMaps.
So, we have to wrap first value and third value into EitherT as well using extension method &lt;code&gt;to EitherT&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In the result we have two layers of Monads too. First &lt;code&gt;Option&lt;&#x2F;code&gt;, then &lt;code&gt;Either&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;scala&amp;gt; cluster&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;value
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Right&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Cluster&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1583095558496&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Alternative case, when some of the statement in composition yields an error value:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; we return Left value this time
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;clusterExists&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(ns: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Either&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Cluster&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Left&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;Cluster is invalid&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;some

scala&amp;gt; cluster&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;value
res4: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Either&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Cluster&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Left&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Cluster&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; is invalid))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In the result, our composition stopped on the second statement. &lt;code&gt;clusterExists&lt;&#x2F;code&gt; returns Some(Left(...)), so that 
&lt;code&gt;EitherT&lt;&#x2F;code&gt; could detect that &lt;code&gt;Either.Left&lt;&#x2F;code&gt; is end of the journey and entire composition ended on &lt;code&gt;Left&lt;&#x2F;code&gt; even it is wrapped into &lt;code&gt;Some&lt;&#x2F;code&gt;.
Basically, Monad transformer looks into two layers one by one, when chaining monadic values. This was our goal
to get a concise program and handle nested monadic value on composition in the same time.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;&#x2F;h2&gt;
&lt;p&gt;Monad and Monad transformers are useful abstractions in every day life of functional programmer.
Although it may seems like Monad is programming language on its own, it allows us to write programs based on the Laws!!!
We can compose different monadic values without using much a control flow. 
In the result, we get fewer logical errors in the code, better structured programs and 
what is more important we get possibility to change programs in future much easier without breaking the entire world.&lt;&#x2F;p&gt;
&lt;p&gt;Now go and flatMap all the things :-)&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Cats-Effect: Cancel Scala Process on Timeout</title>
		<published>2020-02-29T00:00:00+00:00</published>
		<updated>2020-02-29T00:00:00+00:00</updated>
		<link href="https://novakov-alexey.github.io/scala-ce-timeout/" type="text/html"/>
		<id>https://novakov-alexey.github.io/scala-ce-timeout/</id>
		<content type="html">&lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;novakov-alexey.github.io&amp;#x2F;processed_images&amp;#x2F;3747ab26c411df2800.jpg&quot; class=&quot;center-image&quot;&#x2F;&gt;
&lt;br&#x2F;&gt;&lt;br&#x2F;&gt;
&lt;p&gt;Sometimes Scala developer needs to call external program, which is running outside of the JVM. 
In this case, we use &lt;code&gt;scala.sys.process&lt;&#x2F;code&gt; package. Process package has bunch of functions to spin up new processes, 
consume their outputs and errors. Also, spawned process can be stopped. Usually, we run external programs for a short period
of time to make some side-effect. Then, we analyse its exit code to apply some error handling logic in our main Scala program.
It worth to say that process API is blocking execution thread, when we are waiting for its completion. To summarise, Scala
developer wants to do the following:&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;ol&gt;
&lt;li&gt;Start external program as a process by giving a string containing command to be executed in underlying operating system.&lt;&#x2F;li&gt;
&lt;li&gt;Wait for completion and get the exit code.&lt;&#x2F;li&gt;
&lt;li&gt;Cancel spawned process, in case waiting time for its completion is greater than a certain threshold.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Good news, we can do all of that in Cats-Effect leveraging IO monad to handle a side-effect and having timeout logic around.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;handle-blocking-code&quot;&gt;Handle blocking code&lt;&#x2F;h2&gt;
&lt;p&gt;Besides usual &lt;code&gt;ContextShift&lt;&#x2F;code&gt;, we will use separate thread pool to run blocking code of process API.
Cats-Effect provides &lt;code&gt;Blocker&lt;&#x2F;code&gt; class to evaluate specific IO on a given execution context. In case below, we are going
to use CachedThreadPool, which can grow almost infinitely. Our main execution context will be still &lt;code&gt;ExecutionContext.global&lt;&#x2F;code&gt;
and it will be used for non-blocking operations.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; java&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;util&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;concurrent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;Executors
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; java&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;util&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;concurrent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;TimeoutException

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; cats&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;effect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;ExitCase&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;._
import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; cats&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;effect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;{Blocker&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; Concurrent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; ContextShift&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; IO&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; Timer}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; cats&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;implicits&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;._

import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; scala&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;concurrent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;ExecutionContext
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; scala&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;concurrent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;duration&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;._
import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; scala&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;sys&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;process&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;._

implicit val timer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Timer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;timer(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ExecutionContext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;global)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;implicit val cs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ContextShift&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;contextShift(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ExecutionContext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;global)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val cachedThreadPool = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Executors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;newCachedThreadPool()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val blocker = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Blocker&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;liftExecutionContext(
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ExecutionContext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;fromExecutor(cachedThreadPool)
)

&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;blocking-task&quot;&gt;Blocking Task&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;Blocker&lt;&#x2F;code&gt; has &lt;code&gt;blockOn&lt;&#x2F;code&gt; method, which takes an IO and returns an IO to be evaluated on the specified earlier thread pool.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;startProcess&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(cmd: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;{
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val blockingTask =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; blocker&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;blockOn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(cmd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;run()))

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F;.... tbd
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;}

&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Using Cats-Effect &lt;a href=&quot;https:&#x2F;&#x2F;typelevel.org&#x2F;cats-effect&#x2F;typeclasses&#x2F;bracket.html&quot;&gt;Bracket&lt;&#x2F;a&gt; type class we can safely start our
process and handle its IO cancelation. On task cancel event, we are going to call &lt;code&gt;Process#destroy&lt;&#x2F;code&gt; method to stop running in OS.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;startProcess&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(cmd: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;{
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val blockingTask =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; blocker&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;blockOn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(cmd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;run()))
  blockingTask&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;bracketCase { p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;exitValue())
  } { (p, exit) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;    exit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;{
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Completed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;unit
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;) | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Canceled &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;destroy())
    }
  }
} 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Above pattern matching case on Canceled, we stop process &lt;code&gt;p&lt;&#x2F;code&gt; using &lt;code&gt;destroy()&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;run-a-task-with-timeout&quot;&gt;Run a task with timeout&lt;&#x2F;h2&gt;
&lt;p&gt;One of the way to run Cats IO with timeout is to use its &lt;code&gt;race&lt;&#x2F;code&gt; method from &lt;code&gt;Concurrent&lt;&#x2F;code&gt; type class. Second
task in race is a call of &lt;code&gt;Timer#sleep&lt;&#x2F;code&gt;, which is semantically blocking an IO for a specified duration.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s bring special function to start a race for two IOs and have third task as fallback IO, in case first IO
was not completed before timeout. Below function was reused from Cats-Effect documentation:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;timeoutTo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](
    fa: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;after: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;FiniteDuration&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;fallback: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]
  )(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;implicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;timer: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Timer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;concurrent: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Concurrent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;{

    concurrent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;race(fa&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; timer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;sleep(after))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;flatMap {
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Left&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(a) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;        println(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;Done&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
        concurrent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;pure(a)
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Right&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;        println(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;Timeout&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
        fallback
    }
  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we are ready to run our blocking task with timeout. For the sake of example, we set 1 second as timeout and failing returned IO,
by giving fallback IO with exception. Let us run infinitely running command such &lt;code&gt;tail -f&lt;&#x2F;code&gt; on some file to simulate 
long-running task, which we need to cancel in case of timeout.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val task =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; startProcess(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;tail -f build.sbt&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val finalTask =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; timeoutTo(task&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;second&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, 
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;raiseError(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;TimeoutException&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;Failed to run external process&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)))
finalTask&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;unsafeRunSync()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Output&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;scala&amp;gt; finalTask&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;unsafeRunSync()
          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F;... here comes a content of build.sbt as per given command 
  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Timeout
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;java&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;util&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;concurrent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;TimeoutException&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Failed to run external process
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Happy case:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;scala&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val task =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; startProcess(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;echo cats&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
scala&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val finalTask =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; timeoutTo(task&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;second&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, 
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;raiseError(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;TimeoutException&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;Failed to run externall process&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)))
scala&amp;gt; finalTask&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;unsafeRunSync()
cats
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Done
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;res3: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Int = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Using &lt;code&gt;Bracket&lt;&#x2F;code&gt; we can easily catch IO cancelation and release acquired resource. 
In the example above, we destroy external process, so that OS resource is released. &lt;&#x2F;li&gt;
&lt;li&gt;Cats &lt;code&gt;Blocker&lt;&#x2F;code&gt; helps us to run blocking tasks safely with regards
to other non-blocking tasks. &lt;&#x2F;li&gt;
&lt;li&gt;And &lt;code&gt;IO.race&lt;&#x2F;code&gt; can be used to simulate timeout, since it cancels race looser.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;misc&quot;&gt;Misc&lt;&#x2F;h2&gt;
&lt;ul id=&quot;frontmatter&quot; class=&quot;frontmatter frontmatter_page&quot;&gt;&lt;li&gt;Photo by Maico Amorim on Unsplash&lt;&#x2F;li&gt;&lt;&#x2F;ul&gt;</content>
	</entry>
	<entry xml:lang="en">
		<title>Scala FS2 - handle broken CSV lines</title>
		<published>2020-02-27T00:00:00+00:00</published>
		<updated>2020-02-27T00:00:00+00:00</updated>
		<link href="https://novakov-alexey.github.io/scala-fs2/" type="text/html"/>
		<id>https://novakov-alexey.github.io/scala-fs2/</id>
		<content type="html">&lt;p&gt;Recently, I ran into a familiar situation by doing data processing, where I needed to deal with a fragmented data stream. Having fragments, I had to detect manually where exactly new line&#x2F;message starts and where current line&#x2F;message ends in the stream. As turned out, one can aggregate intermediate state of the fragmented stream using scan function.&lt;&#x2F;p&gt;
&lt;p&gt;Let us dig down into how scan function is working.&lt;&#x2F;p&gt;
&lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;novakov-alexey.github.io&amp;#x2F;processed_images&amp;#x2F;7445a2d5c821903f00.jpg&quot; class=&quot;center-image&quot;&#x2F;&gt;
&lt;br&#x2F;&gt;&lt;br&#x2F;&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;scan-function&quot;&gt;Scan function&lt;&#x2F;h2&gt;
&lt;p&gt;FS2 Stream Scan combinator works similar to scan function in Scala collection library. Official Scala doc for scan:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;scan&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&amp;gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;That&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](z: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)(op: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;⇒ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)(
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;implicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;cbf: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;CanBuildFrom&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;That&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]
): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;That
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;says:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
  Computes a prefix scan of the elements of the collection.&lt;br &#x2F;&gt;
  
  -- Scala doc
  
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Hm, what this would mean? It is much easier to try it and see how it works.&lt;&#x2F;p&gt;
&lt;p&gt;Here is &lt;a href=&quot;https:&#x2F;&#x2F;superruzafa.github.io&#x2F;visual-scala-reference&#x2F;scanLeft&quot;&gt;visual diagram&lt;&#x2F;a&gt; for scan:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;novakov-alexey.github.io&#x2F;scala-fs2&#x2F;scanLeft.svg&quot; alt=&quot;scanleft&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Let’s try with simple List using Scala REPL.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;If we just aggregate and return acc every time in op function:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val l = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;I&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;am&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;broken&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;sentence&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
l: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;I&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;am&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;broken&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;sentence&amp;quot;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;&amp;gt; l&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;scan(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;){&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(acc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;e) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; acc + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; +  e}
res5: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot; I&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot; I am&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot; I am broken&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot; I am broken sentence&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;If we apply some if condition based on the element content, then we can control, which element is going to be added into output collection:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;&amp;gt; l&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;scan(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;){
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(acc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;e) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt; if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;broken&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;) e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;  acc + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; +  e
}

res6: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot; I&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot; I am&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;broken&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;broken sentence&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As we can see, once boolean condition in the if is true, we return only the current element e and start new accumulation, i.e. produce next element without all the stuff we accumulated before. Hopefully, these two examples help to grasp an idea of the scan function.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;csv-file-processing-using-fs2&quot;&gt;CSV file processing using FS2&lt;&#x2F;h2&gt;
&lt;p&gt;Let’s first create a Scala IOApp using cats-effect library, which is coming as FS2 dependency, and define FS2 blocking execution context to work with files.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; java&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;nio&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;Paths
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; java&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;util&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;concurrent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;Executors
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; cats&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;effect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;{ExitCode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; IO&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; IOApp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; Resource}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; cats&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;instances&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;._
import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; cats&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;syntax&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;all&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;._
import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; fs2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;._

object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt; Main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;IOApp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;{
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val Separator = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;;&amp;quot;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val isNextId&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Regex &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;^(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;s*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;d+.*)$Separator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;r
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val LastRowPaddingId = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;1$Separator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val ColumnsInFile = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;10
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val HeaderLines = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1  
  
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;override def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(args: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ExitCode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;    processFile(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;.&#x2F;input.csv&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;compile&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;drain&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;as(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ExitCode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Success&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)  
    
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;private val blockingExecutionContext =
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Resource&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;make(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ExecutionContext
          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;fromExecutorService(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Executors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;newFixedThreadPool(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;))
        ))(ec &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(ec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;shutdown()))  
        
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;private def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;processFile&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(filePath: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= ???
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Above &lt;strong&gt;processFile&lt;&#x2F;strong&gt; function will be returning a stream taking a file path to be processed as CSV file.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;processFile&lt;&#x2F;strong&gt; implementation:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;resource(blockingExecutionContext)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;flatMap { blockingEC &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;  io&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;file
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;readAll[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Paths&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;get(filePath)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; blockingEC&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;4096&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;through(text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;utf8Decode)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;append(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;eval(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;pure(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;LastRowPaddingId&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)))
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;through(text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;lines)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;drop(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;HeaderLines&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;scan((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)) {
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;((acc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;line) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; concatBrokenLines(acc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; line)
    }
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;filter { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;line) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; line&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;trim&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;nonEmpty }
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;map { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;line) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; line&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;split(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Separator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;ColumnsInFile&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;) }
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;map(processRow)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;foldMap(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;_ =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;map(n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; println(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;Processed $n record(s)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;))
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The main code of finding the complete CSV line (a line, which can have multiple parts of one logical CSV line separated by line brakes like \n) starts at line:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;scan((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;((acc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;line) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; concatBrokenLines(acc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; line)
}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;filter { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;line) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; line&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;trim&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;nonEmpty }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Inside the scan function, we delegate ‘op’ part to concatBrokenLine function:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;concatBrokenLines&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(acc: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;line: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;{  
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; next line detected, i.e. we flush `acc` downstream,
  &#x2F;&#x2F; since it already contains a complete line to be processed
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(isNextId&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;findFirstIn(acc)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;isDefined 
      &amp;amp;&amp;amp; isNextId&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;findFirstIn(line)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;isDefined) (line&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; acc)
  
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; next line is not yet detected, i.e. we flush an empty string 
  &#x2F;&#x2F; and append current line to the current `acc` state  
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(acc + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; + line&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;using regular expression &lt;strong&gt;isNextId&lt;&#x2F;strong&gt; we identify, whether new line marker is found. In the regular expression we want to find a number following by semicolon (according to current file business logic).&lt;&#x2F;p&gt;
&lt;p&gt;Read the inline comments in the &lt;em&gt;concatBrokenLines&lt;&#x2F;em&gt; function on how using if&#x2F;else logic, we control what needs to be put into next element of the downstream. As you can see, we use second half of the accumulator to push the complete line further (in the if branch).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Now looking at scan and its concatBrokenLines function together&lt;&#x2F;strong&gt;, we can summarise:&lt;&#x2F;p&gt;
&lt;p&gt;we process CSV lines by folding them via scan function using empty element as a tuple of two empty strings (“”, “”). In the head of the scanning lambda we use only first part of the zero element, we call it acc, i.e. accumulator. We also have &lt;strong&gt;line&lt;&#x2F;strong&gt; variable, which is given by the Stream.scan function itself. Then, we delegate the decision on what needs to be returned to the downstream using &lt;em&gt;filter&lt;&#x2F;em&gt; function. Basically, we use &lt;em&gt;filter&lt;&#x2F;em&gt; as a guard to control what actually needs to be passed further for the main processing logic as CVS line.&lt;&#x2F;p&gt;
&lt;p&gt;Also, we append fake line to be able to process the very last line. This last line needs one more marker to be properly detected as complete line:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;append(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;eval(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;pure(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt; + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;LastRowPaddingId&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;test-of-the-fs2-code&quot;&gt;Test of the FS2 code&lt;&#x2F;h2&gt;
&lt;p&gt;Using file input.csv:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;index;City;population
1;Berlin is the
capital and largest city of
Germany by
both area and population.;3,748,148
1;Madrid is the capital of Spain and the largest
municipality in both the Community of Madrid and Spain as
a whole.;3,223,334
1;Donetsk former names: Aleksandrovka,
Hughesovka, Yuzovka, Stalino is an industrial city in Ukraine on the Kalmius
River.;929,063
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;we print the resulted lines of the stream in the &lt;em&gt;processRow&lt;&#x2F;em&gt; function. In real life this function supposed to do something useful:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;private def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;processRow&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;(columns: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Unit = 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;  println(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;processed: ${columns&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;mkString(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot; :: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;trim}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Output:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;&quot;&gt;
&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span style=&quot;color:#d8dee9;&quot;&gt;processed: 1 :: Berlin is the capital and largest city of Germany by both area and population. :: 3,748,148
processed: 1 :: Madrid is the capital of Spain and the largest municipality in both the Community of Madrid and Spain as a whole. :: 3,223,334
processed: 1 :: Donetsk former names: Aleksandrovka, Hughesovka, Yuzovka, Stalino is an industrial city in Ukraine on the Kalmius River. :: 929,063
Processed 3 record(s)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;&#x2F;h2&gt;
&lt;p&gt;Applying knowledge of functional combinators, we have gotten concise and clean code, without using any global mutable state outside of the stream definition. We have also solved the problem within the single data stream using scan to aggregate intermediate state and filter function as a guard to discard incomplete CSV lines.&lt;&#x2F;p&gt;
&lt;p&gt;FS2 library is very nice and especially having Cats and Cats-effect as direct dependency. 
See more examples for functional streaming in &lt;a href=&quot;https:&#x2F;&#x2F;fs2.io&#x2F;guide.html&quot;&gt;FS2 guide&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Source code: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;novakov-alexey&#x2F;fs2-csv-scan&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;novakov-alexey&#x2F;fs2-csv-scan&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
</feed>
